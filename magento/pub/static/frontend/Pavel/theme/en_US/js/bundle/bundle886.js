require.config({"config": {
        "jsbuild":{"jquery/jquery.details.js":"/*! http://mths.be/details v0.0.6 by @mathias | includes http://mths.be/noselect v1.0.3 */\ndefine([\n    \"jquery\",\n    \"modernizr/modernizr.details\"\n], function($){\n\n    var proto = $.fn,\n        details,\n        // :'(\n        isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]',\n        // Feature test for native `<details>` support\n        isDetailsSupported = $('html').hasClass('details'),\n        toggleOpen = function($details, $detailsSummary, $detailsNotSummary, toggle) {\n            var isOpen = typeof $details.attr('open') == 'string',\n                close = isOpen && toggle || !isOpen && !toggle;\n            if (close) {\n                $details.removeClass('open').prop('open', false).triggerHandler('close.details');\n                $detailsSummary.attr('aria-expanded', false);\n                $detailsNotSummary.hide();\n            } else {\n                $details.addClass('open').prop('open', true).triggerHandler('open.details');\n                $detailsSummary.attr('aria-expanded', true);\n                $detailsNotSummary.show();\n            }\n        };\n\n    /* http://mths.be/noselect v1.0.3 */\n    proto.noSelect = function() {\n\n        // Since the string 'none' is used three times, storing it in a variable gives better results after minification\n        var none = 'none';\n\n        // onselectstart and ondragstart for WebKit & IE\n        // onmousedown for WebKit & Opera\n        return this.bind('selectstart dragstart mousedown', function() {\n            return false;\n        }).css({\n            'MozUserSelect': none,\n            'msUserSelect': none,\n            'webkitUserSelect': none,\n            'userSelect': none\n        });\n\n    };\n\n    // Execute the fallback only if there\u2019s no native `details` support\n    if (isDetailsSupported) {\n        details = proto.details = function() {\n\n            return this.each(function() {\n                var $details = $(this),\n                    $summary = $('summary', $details).first();\n                $summary.attr({\n                    'role': 'button',\n                    'aria-expanded': $details.prop('open')\n                }).on('click.xxx', function() {\n                    // the value of the `open` property is the old value\n                    var close = $details.prop('open');\n                    $summary.attr('aria-expanded', !close);\n                    $details.triggerHandler((close ? 'close' : 'open') + '.details');\n                });\n            });\n\n        };\n\n        details.support = isDetailsSupported;\n\n    } else {\n        details = proto.details = function() {\n\n            // Loop through all `details` elements\n            return this.each(function() {\n\n                // Store a reference to the current `details` element in a variable\n                var $details = $(this),\n                    // Store a reference to the `summary` element of the current `details` element (if any) in a variable\n                    $detailsSummary = $('summary', $details).first(),\n                    // Do the same for the info within the `details` element\n                    $detailsNotSummary = $details.children(':not(summary)'),\n                    // This will be used later to look for direct child text nodes\n                    $detailsNotSummaryContents = $details.contents(':not(summary)');\n\n                // If there is no `summary` in the current `details` element\u2026\n                if (!$detailsSummary.length) {\n                    // \u2026create one with default text\n                    $detailsSummary = $('<summary>').text($.mage.__('Details')).prependTo($details);\n                }\n\n                // Look for direct child text nodes\n                if ($detailsNotSummary.length != $detailsNotSummaryContents.length) {\n                    // Wrap child text nodes in a `span` element\n                    $detailsNotSummaryContents.filter(function() {\n                        // Only keep the node in the collection if it\u2019s a text node containing more than only whitespace\n                        // http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#space-character\n                        return this.nodeType == 3 && /[^ \\t\\n\\f\\r]/.test(this.data);\n                    }).wrap('<span>');\n                    // There are now no direct child text nodes anymore \u2014 they\u2019re wrapped in `span` elements\n                    $detailsNotSummary = $details.children(':not(summary)');\n                }\n\n                // Hide content unless there\u2019s an `open` attribute\n                toggleOpen($details, $detailsSummary, $detailsNotSummary);\n\n                // Add `role=button` and set the `tabindex` of the `summary` element to `0` to make it keyboard accessible\n                $detailsSummary.attr('role', 'button').noSelect().prop('tabIndex', 0).off('click').on('click.details', function() {\n                    // Focus on the `summary` element\n                    $detailsSummary.focus();\n                    // Toggle the `open` and `aria-expanded` attributes and the `open` property of the `details` element and display the additional info\n                    toggleOpen($details, $detailsSummary, $detailsNotSummary, true);\n                }).keyup(function(event) {\n                    if (32 == event.keyCode || (13 == event.keyCode && !isOpera)) {\n                        // Space or Enter is pressed \u2014 trigger the `click` event on the `summary` element\n                        // Opera already seems to trigger the `click` event when Enter is pressed\n                        event.preventDefault();\n                        $detailsSummary.click();\n                    }\n                });\n\n            });\n\n        };\n\n        details.support = isDetailsSupported;\n\n    }\n\n});\n"}
}});
