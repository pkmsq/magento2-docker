require.config({"config": {
        "jsbuild":{"jquery/ui-modules/tabs.js":"/*!\n * jQuery UI Tabs - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/tabs/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget'\n], function ($, undefined) {\n\n    var tabId = 0,\n        rhash = /#.*$/;\n\n    function getNextTabId() {\n        return ++tabId;\n    }\n\n    function isLocal(anchor) {\n        // support: IE7\n        // IE7 doesn't normalize the href property when set via script (#9317)\n        anchor = anchor.cloneNode(false);\n\n        return anchor.hash.length > 1 &&\n            decodeURIComponent(anchor.href.replace(rhash, \"\")) ===\n            decodeURIComponent(location.href.replace(rhash, \"\"));\n    }\n\n    $.widget(\"ui.tabs\", {\n        version: \"1.10.4\",\n        delay: 300,\n        options: {\n            active: null,\n            collapsible: false,\n            event: \"click\",\n            heightStyle: \"content\",\n            hide: null,\n            show: null,\n\n            // callbacks\n            activate: null,\n            beforeActivate: null,\n            beforeLoad: null,\n            load: null\n        },\n\n        _create: function () {\n            var that = this,\n                options = this.options;\n\n            this.running = false;\n\n            this.element\n                .addClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all\")\n                .toggleClass(\"ui-tabs-collapsible\", options.collapsible)\n                // Prevent users from focusing disabled tabs via click\n                .delegate(\".ui-tabs-nav > li\", \"mousedown\" + this.eventNamespace, function (event) {\n                    if ($(this).is(\".ui-state-disabled\")) {\n                        event.preventDefault();\n                    }\n                })\n                // support: IE <9\n                // Preventing the default action in mousedown doesn't prevent IE\n                // from focusing the element, so if the anchor gets focused, blur.\n                // We don't have to worry about focusing the previously focused\n                // element since clicking on a non-focusable element should focus\n                // the body anyway.\n                .delegate(\".ui-tabs-anchor\", \"focus\" + this.eventNamespace, function () {\n                    if ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\n                        this.blur();\n                    }\n                });\n\n            this._processTabs();\n            options.active = this._initialActive();\n\n            // Take disabling tabs via class attribute from HTML\n            // into account and update option properly.\n            if ($.isArray(options.disabled)) {\n                options.disabled = $.unique(options.disabled.concat(\n                    $.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\n                        return that.tabs.index(li);\n                    })\n                )).sort();\n            }\n\n            // check for length avoids error when initializing empty list\n            if (this.options.active !== false && this.anchors.length) {\n                this.active = this._findActive(options.active);\n            } else {\n                this.active = $();\n            }\n\n            this._refresh();\n\n            if (this.active.length) {\n                this.load(options.active);\n            }\n        },\n\n        _initialActive: function () {\n            var active = this.options.active,\n                collapsible = this.options.collapsible,\n                locationHash = location.hash.substring(1);\n\n            if (active === null) {\n                // check the fragment identifier in the URL\n                if (locationHash) {\n                    this.tabs.each(function (i, tab) {\n                        if ($(tab).attr(\"aria-controls\") === locationHash) {\n                            active = i;\n                            return false;\n                        }\n                    });\n                }\n\n                // check for a tab marked active via a class\n                if (active === null) {\n                    active = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\n                }\n\n                // no active tab, set to false\n                if (active === null || active === -1) {\n                    active = this.tabs.length ? 0 : false;\n                }\n            }\n\n            // handle numbers: negative, out of range\n            if (active !== false) {\n                active = this.tabs.index(this.tabs.eq(active));\n                if (active === -1) {\n                    active = collapsible ? false : 0;\n                }\n            }\n\n            // don't allow collapsible: false and active: false\n            if (!collapsible && active === false && this.anchors.length) {\n                active = 0;\n            }\n\n            return active;\n        },\n\n        _getCreateEventData: function () {\n            return {\n                tab: this.active,\n                panel: !this.active.length ? $() : this._getPanelForTab(this.active)\n            };\n        },\n\n        _tabKeydown: function (event) {\n            var focusedTab = $(this.document[0].activeElement).closest(\"li\"),\n                selectedIndex = this.tabs.index(focusedTab),\n                goingForward = true;\n\n            if (this._handlePageNav(event)) {\n                return;\n            }\n\n            switch (event.keyCode) {\n                case $.ui.keyCode.RIGHT:\n                case $.ui.keyCode.DOWN:\n                    selectedIndex++;\n                    break;\n                case $.ui.keyCode.UP:\n                case $.ui.keyCode.LEFT:\n                    goingForward = false;\n                    selectedIndex--;\n                    break;\n                case $.ui.keyCode.END:\n                    selectedIndex = this.anchors.length - 1;\n                    break;\n                case $.ui.keyCode.HOME:\n                    selectedIndex = 0;\n                    break;\n                case $.ui.keyCode.SPACE:\n                    // Activate only, no collapsing\n                    event.preventDefault();\n                    clearTimeout(this.activating);\n                    this._activate(selectedIndex);\n                    return;\n                case $.ui.keyCode.ENTER:\n                    // Toggle (cancel delayed activation, allow collapsing)\n                    event.preventDefault();\n                    clearTimeout(this.activating);\n                    // Determine if we should collapse or activate\n                    this._activate(selectedIndex === this.options.active ? false : selectedIndex);\n                    return;\n                default:\n                    return;\n            }\n\n            // Focus the appropriate tab, based on which key was pressed\n            event.preventDefault();\n            clearTimeout(this.activating);\n            selectedIndex = this._focusNextTab(selectedIndex, goingForward);\n\n            // Navigating with control key will prevent automatic activation\n            if (!event.ctrlKey) {\n                // Update aria-selected immediately so that AT think the tab is already selected.\n                // Otherwise AT may confuse the user by stating that they need to activate the tab,\n                // but the tab will already be activated by the time the announcement finishes.\n                focusedTab.attr(\"aria-selected\", \"false\");\n                this.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\n\n                this.activating = this._delay(function () {\n                    this.option(\"active\", selectedIndex);\n                }, this.delay);\n            }\n        },\n\n        _panelKeydown: function (event) {\n            if (this._handlePageNav(event)) {\n                return;\n            }\n\n            // Ctrl+up moves focus to the current tab\n            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\n                event.preventDefault();\n                this.active.focus();\n            }\n        },\n\n        // Alt+page up/down moves focus to the previous/next tab (and activates)\n        _handlePageNav: function (event) {\n            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\n                this._activate(this._focusNextTab(this.options.active - 1, false));\n                return true;\n            }\n            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\n                this._activate(this._focusNextTab(this.options.active + 1, true));\n                return true;\n            }\n        },\n\n        _findNextTab: function (index, goingForward) {\n            var lastTabIndex = this.tabs.length - 1;\n\n            function constrain() {\n                if (index > lastTabIndex) {\n                    index = 0;\n                }\n                if (index < 0) {\n                    index = lastTabIndex;\n                }\n                return index;\n            }\n\n            while ($.inArray(constrain(), this.options.disabled) !== -1) {\n                index = goingForward ? index + 1 : index - 1;\n            }\n\n            return index;\n        },\n\n        _focusNextTab: function (index, goingForward) {\n            index = this._findNextTab(index, goingForward);\n            this.tabs.eq(index).focus();\n            return index;\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"active\") {\n                // _activate() will handle invalid values and update this.options\n                this._activate(value);\n                return;\n            }\n\n            if (key === \"disabled\") {\n                // don't use the widget factory's disabled handling\n                this._setupDisabled(value);\n                return;\n            }\n\n            this._super(key, value);\n\n            if (key === \"collapsible\") {\n                this.element.toggleClass(\"ui-tabs-collapsible\", value);\n                // Setting collapsible: false while collapsed; open first panel\n                if (!value && this.options.active === false) {\n                    this._activate(0);\n                }\n            }\n\n            if (key === \"event\") {\n                this._setupEvents(value);\n            }\n\n            if (key === \"heightStyle\") {\n                this._setupHeightStyle(value);\n            }\n        },\n\n        _tabId: function (tab) {\n            return tab.attr(\"aria-controls\") || \"ui-tabs-\" + getNextTabId();\n        },\n\n        _sanitizeSelector: function (hash) {\n            return hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\n        },\n\n        refresh: function () {\n            var options = this.options,\n                lis = this.tablist.children(\":has(a[href])\");\n\n            // get disabled tabs from class attribute from HTML\n            // this will get converted to a boolean if needed in _refresh()\n            options.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\n                return lis.index(tab);\n            });\n\n            this._processTabs();\n\n            // was collapsed or no tabs\n            if (options.active === false || !this.anchors.length) {\n                options.active = false;\n                this.active = $();\n                // was active, but active tab is gone\n            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\n                // all remaining tabs are disabled\n                if (this.tabs.length === options.disabled.length) {\n                    options.active = false;\n                    this.active = $();\n                    // activate previous tab\n                } else {\n                    this._activate(this._findNextTab(Math.max(0, options.active - 1), false));\n                }\n                // was active, active tab still exists\n            } else {\n                // make sure active index is correct\n                options.active = this.tabs.index(this.active);\n            }\n\n            this._refresh();\n        },\n\n        _refresh: function () {\n            this._setupDisabled(this.options.disabled);\n            this._setupEvents(this.options.event);\n            this._setupHeightStyle(this.options.heightStyle);\n\n            this.tabs.not(this.active).attr({\n                \"aria-selected\": \"false\",\n                tabIndex: -1\n            });\n            this.panels.not(this._getPanelForTab(this.active))\n                .hide()\n                .attr({\n                    \"aria-expanded\": \"false\",\n                    \"aria-hidden\": \"true\"\n                });\n\n            // Make sure one tab is in the tab order\n            if (!this.active.length) {\n                this.tabs.eq(0).attr(\"tabIndex\", 0);\n            } else {\n                this.active\n                    .addClass(\"ui-tabs-active ui-state-active\")\n                    .attr({\n                        \"aria-selected\": \"true\",\n                        tabIndex: 0\n                    });\n                this._getPanelForTab(this.active)\n                    .show()\n                    .attr({\n                        \"aria-expanded\": \"true\",\n                        \"aria-hidden\": \"false\"\n                    });\n            }\n        },\n\n        _processTabs: function () {\n            var that = this;\n\n            this.tablist = this._getList()\n                .addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\n                .attr(\"role\", \"tablist\");\n\n            this.tabs = this.tablist.find(\"> li:has(a[href])\")\n                .addClass(\"ui-state-default ui-corner-top\")\n                .attr({\n                    role: \"tab\",\n                    tabIndex: -1\n                });\n\n            this.anchors = this.tabs.map(function () {\n                return $(\"a\", this)[0];\n            })\n                .addClass(\"ui-tabs-anchor\")\n                .attr({\n                    role: \"presentation\",\n                    tabIndex: -1\n                });\n\n            this.panels = $();\n\n            this.anchors.each(function (i, anchor) {\n                var selector, panel, panelId,\n                    anchorId = $(anchor).uniqueId().attr(\"id\"),\n                    tab = $(anchor).closest(\"li\"),\n                    originalAriaControls = tab.attr(\"aria-controls\");\n\n                // inline tab\n                if (isLocal(anchor)) {\n                    selector = anchor.hash;\n                    panel = that.element.find(that._sanitizeSelector(selector));\n                    // remote tab\n                } else {\n                    panelId = that._tabId(tab);\n                    selector = \"#\" + panelId;\n                    panel = that.element.find(selector);\n                    if (!panel.length) {\n                        panel = that._createPanel(panelId);\n                        panel.insertAfter(that.panels[i - 1] || that.tablist);\n                    }\n                    panel.attr(\"aria-live\", \"polite\");\n                }\n\n                if (panel.length) {\n                    that.panels = that.panels.add(panel);\n                }\n                if (originalAriaControls) {\n                    tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\n                }\n                tab.attr({\n                    \"aria-controls\": selector.substring(1),\n                    \"aria-labelledby\": anchorId\n                });\n                panel.attr(\"aria-labelledby\", anchorId);\n            });\n\n            this.panels\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\n                .attr(\"role\", \"tabpanel\");\n        },\n\n        // allow overriding how to find the list for rare usage scenarios (#7715)\n        _getList: function () {\n            return this.tablist || this.element.find(\"ol,ul\").eq(0);\n        },\n\n        _createPanel: function (id) {\n            return $(\"<div>\")\n                .attr(\"id\", id)\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\n                .data(\"ui-tabs-destroy\", true);\n        },\n\n        _setupDisabled: function (disabled) {\n            if ($.isArray(disabled)) {\n                if (!disabled.length) {\n                    disabled = false;\n                } else if (disabled.length === this.anchors.length) {\n                    disabled = true;\n                }\n            }\n\n            // disable tabs\n            for (var i = 0, li; (li = this.tabs[i]); i++) {\n                if (disabled === true || $.inArray(i, disabled) !== -1) {\n                    $(li)\n                        .addClass(\"ui-state-disabled\")\n                        .attr(\"aria-disabled\", \"true\");\n                } else {\n                    $(li)\n                        .removeClass(\"ui-state-disabled\")\n                        .removeAttr(\"aria-disabled\");\n                }\n            }\n\n            this.options.disabled = disabled;\n        },\n\n        _setupEvents: function (event) {\n            var events = {\n                click: function (event) {\n                    event.preventDefault();\n                }\n            };\n            if (event) {\n                $.each(event.split(\" \"), function (index, eventName) {\n                    events[eventName] = \"_eventHandler\";\n                });\n            }\n\n            this._off(this.anchors.add(this.tabs).add(this.panels));\n            this._on(this.anchors, events);\n            this._on(this.tabs, {keydown: \"_tabKeydown\"});\n            this._on(this.panels, {keydown: \"_panelKeydown\"});\n\n            this._focusable(this.tabs);\n            this._hoverable(this.tabs);\n        },\n\n        _setupHeightStyle: function (heightStyle) {\n            var maxHeight,\n                parent = this.element.parent();\n\n            if (heightStyle === \"fill\") {\n                maxHeight = parent.height();\n                maxHeight -= this.element.outerHeight() - this.element.height();\n\n                this.element.siblings(\":visible\").each(function () {\n                    var elem = $(this),\n                        position = elem.css(\"position\");\n\n                    if (position === \"absolute\" || position === \"fixed\") {\n                        return;\n                    }\n                    maxHeight -= elem.outerHeight(true);\n                });\n\n                this.element.children().not(this.panels).each(function () {\n                    maxHeight -= $(this).outerHeight(true);\n                });\n\n                this.panels.each(function () {\n                    $(this).height(Math.max(0, maxHeight -\n                        $(this).innerHeight() + $(this).height()));\n                })\n                    .css(\"overflow\", \"auto\");\n            } else if (heightStyle === \"auto\") {\n                maxHeight = 0;\n                this.panels.each(function () {\n                    maxHeight = Math.max(maxHeight, $(this).height(\"\").height());\n                }).height(maxHeight);\n            }\n        },\n\n        _eventHandler: function (event) {\n            var options = this.options,\n                active = this.active,\n                anchor = $(event.currentTarget),\n                tab = anchor.closest(\"li\"),\n                clickedIsActive = tab[0] === active[0],\n                collapsing = clickedIsActive && options.collapsible,\n                toShow = collapsing ? $() : this._getPanelForTab(tab),\n                toHide = !active.length ? $() : this._getPanelForTab(active),\n                eventData = {\n                    oldTab: active,\n                    oldPanel: toHide,\n                    newTab: collapsing ? $() : tab,\n                    newPanel: toShow\n                };\n\n            event.preventDefault();\n\n            if (tab.hasClass(\"ui-state-disabled\") ||\n                // tab is already loading\n                tab.hasClass(\"ui-tabs-loading\") ||\n                // can't switch durning an animation\n                this.running ||\n                // click on active header, but not collapsible\n                (clickedIsActive && !options.collapsible) ||\n                // allow canceling activation\n                (this._trigger(\"beforeActivate\", event, eventData) === false)) {\n                return;\n            }\n\n            options.active = collapsing ? false : this.tabs.index(tab);\n\n            this.active = clickedIsActive ? $() : tab;\n            if (this.xhr) {\n                this.xhr.abort();\n            }\n\n            if (!toHide.length && !toShow.length) {\n                $.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\n            }\n\n            if (toShow.length) {\n                this.load(this.tabs.index(tab), event);\n            }\n            this._toggle(event, eventData);\n        },\n\n        // handles show/hide for selecting tabs\n        _toggle: function (event, eventData) {\n            var that = this,\n                toShow = eventData.newPanel,\n                toHide = eventData.oldPanel;\n\n            this.running = true;\n\n            function complete() {\n                that.running = false;\n                that._trigger(\"activate\", event, eventData);\n            }\n\n            function show() {\n                eventData.newTab.closest(\"li\").addClass(\"ui-tabs-active ui-state-active\");\n\n                if (toShow.length && that.options.show) {\n                    that._show(toShow, that.options.show, complete);\n                } else {\n                    toShow.show();\n                    complete();\n                }\n            }\n\n            // start out by hiding, then showing, then completing\n            if (toHide.length && this.options.hide) {\n                this._hide(toHide, this.options.hide, function () {\n                    eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n                    show();\n                });\n            } else {\n                eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n                toHide.hide();\n                show();\n            }\n\n            toHide.attr({\n                \"aria-expanded\": \"false\",\n                \"aria-hidden\": \"true\"\n            });\n            eventData.oldTab.attr(\"aria-selected\", \"false\");\n            // If we're switching tabs, remove the old tab from the tab order.\n            // If we're opening from collapsed state, remove the previous tab from the tab order.\n            // If we're collapsing, then keep the collapsing tab in the tab order.\n            if (toShow.length && toHide.length) {\n                eventData.oldTab.attr(\"tabIndex\", -1);\n            } else if (toShow.length) {\n                this.tabs.filter(function () {\n                    return $(this).attr(\"tabIndex\") === 0;\n                })\n                    .attr(\"tabIndex\", -1);\n            }\n\n            toShow.attr({\n                \"aria-expanded\": \"true\",\n                \"aria-hidden\": \"false\"\n            });\n            eventData.newTab.attr({\n                \"aria-selected\": \"true\",\n                tabIndex: 0\n            });\n        },\n\n        _activate: function (index) {\n            var anchor,\n                active = this._findActive(index);\n\n            // trying to activate the already active panel\n            if (active[0] === this.active[0]) {\n                return;\n            }\n\n            // trying to collapse, simulate a click on the current active header\n            if (!active.length) {\n                active = this.active;\n            }\n\n            anchor = active.find(\".ui-tabs-anchor\")[0];\n            this._eventHandler({\n                target: anchor,\n                currentTarget: anchor,\n                preventDefault: $.noop\n            });\n        },\n\n        _findActive: function (index) {\n            return index === false ? $() : this.tabs.eq(index);\n        },\n\n        _getIndex: function (index) {\n            // meta-function to give users option to provide a href string instead of a numerical index.\n            if (typeof index === \"string\") {\n                index = this.anchors.index(this.anchors.filter(\"[href$='\" + index + \"']\"));\n            }\n\n            return index;\n        },\n\n        _destroy: function () {\n            if (this.xhr) {\n                this.xhr.abort();\n            }\n\n            this.element.removeClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible\");\n\n            this.tablist\n                .removeClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\n                .removeAttr(\"role\");\n\n            this.anchors\n                .removeClass(\"ui-tabs-anchor\")\n                .removeAttr(\"role\")\n                .removeAttr(\"tabIndex\")\n                .removeUniqueId();\n\n            this.tabs.add(this.panels).each(function () {\n                if ($.data(this, \"ui-tabs-destroy\")) {\n                    $(this).remove();\n                } else {\n                    $(this)\n                        .removeClass(\"ui-state-default ui-state-active ui-state-disabled \" +\n                            \"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel\")\n                        .removeAttr(\"tabIndex\")\n                        .removeAttr(\"aria-live\")\n                        .removeAttr(\"aria-busy\")\n                        .removeAttr(\"aria-selected\")\n                        .removeAttr(\"aria-labelledby\")\n                        .removeAttr(\"aria-hidden\")\n                        .removeAttr(\"aria-expanded\")\n                        .removeAttr(\"role\");\n                }\n            });\n\n            this.tabs.each(function () {\n                var li = $(this),\n                    prev = li.data(\"ui-tabs-aria-controls\");\n                if (prev) {\n                    li\n                        .attr(\"aria-controls\", prev)\n                        .removeData(\"ui-tabs-aria-controls\");\n                } else {\n                    li.removeAttr(\"aria-controls\");\n                }\n            });\n\n            this.panels.show();\n\n            if (this.options.heightStyle !== \"content\") {\n                this.panels.css(\"height\", \"\");\n            }\n        },\n\n        enable: function (index) {\n            var disabled = this.options.disabled;\n            if (disabled === false) {\n                return;\n            }\n\n            if (index === undefined) {\n                disabled = false;\n            } else {\n                index = this._getIndex(index);\n                if ($.isArray(disabled)) {\n                    disabled = $.map(disabled, function (num) {\n                        return num !== index ? num : null;\n                    });\n                } else {\n                    disabled = $.map(this.tabs, function (li, num) {\n                        return num !== index ? num : null;\n                    });\n                }\n            }\n            this._setupDisabled(disabled);\n        },\n\n        disable: function (index) {\n            var disabled = this.options.disabled;\n            if (disabled === true) {\n                return;\n            }\n\n            if (index === undefined) {\n                disabled = true;\n            } else {\n                index = this._getIndex(index);\n                if ($.inArray(index, disabled) !== -1) {\n                    return;\n                }\n                if ($.isArray(disabled)) {\n                    disabled = $.merge([index], disabled).sort();\n                } else {\n                    disabled = [index];\n                }\n            }\n            this._setupDisabled(disabled);\n        },\n\n        load: function (index, event) {\n            index = this._getIndex(index);\n            var that = this,\n                tab = this.tabs.eq(index),\n                anchor = tab.find(\".ui-tabs-anchor\"),\n                panel = this._getPanelForTab(tab),\n                eventData = {\n                    tab: tab,\n                    panel: panel\n                };\n\n            // not remote\n            if (isLocal(anchor[0])) {\n                return;\n            }\n\n            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));\n\n            // support: jQuery <1.8\n            // jQuery <1.8 returns false if the request is canceled in beforeSend,\n            // but as of 1.8, $.ajax() always returns a jqXHR object.\n            if (this.xhr && this.xhr.statusText !== \"canceled\") {\n                tab.addClass(\"ui-tabs-loading\");\n                panel.attr(\"aria-busy\", \"true\");\n\n                this.xhr\n                    .success(function (response) {\n                        // support: jQuery <1.8\n                        // http://bugs.jquery.com/ticket/11778\n                        setTimeout(function () {\n                            panel.html(response);\n                            that._trigger(\"load\", event, eventData);\n                        }, 1);\n                    })\n                    .complete(function (jqXHR, status) {\n                        // support: jQuery <1.8\n                        // http://bugs.jquery.com/ticket/11778\n                        setTimeout(function () {\n                            if (status === \"abort\") {\n                                that.panels.stop(false, true);\n                            }\n\n                            tab.removeClass(\"ui-tabs-loading\");\n                            panel.removeAttr(\"aria-busy\");\n\n                            if (jqXHR === that.xhr) {\n                                delete that.xhr;\n                            }\n                        }, 1);\n                    });\n            }\n        },\n\n        _ajaxSettings: function (anchor, event, eventData) {\n            var that = this;\n            return {\n                url: anchor.attr(\"href\"),\n                beforeSend: function (jqXHR, settings) {\n                    return that._trigger(\"beforeLoad\", event,\n                        $.extend({jqXHR: jqXHR, ajaxSettings: settings}, eventData));\n                }\n            };\n        },\n\n        _getPanelForTab: function (tab) {\n            var id = $(tab).attr(\"aria-controls\");\n            return this.element.find(this._sanitizeSelector(\"#\" + id));\n        }\n    });\n\n});\n"}
}});
