require.config({"config": {
        "jsbuild":{"jquery/ui-modules/resizable.js":"/*!\n * jQuery UI Resizable - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/resizable/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/mouse'\n], function ($, undefined) {\n\n    function num(v) {\n        return parseInt(v, 10) || 0;\n    }\n\n    function isNumber(value) {\n        return !isNaN(parseInt(value, 10));\n    }\n\n    $.widget(\"ui.resizable\", $.ui.mouse, {\n        version: \"1.10.4\",\n        widgetEventPrefix: \"resize\",\n        options: {\n            alsoResize: false,\n            animate: false,\n            animateDuration: \"slow\",\n            animateEasing: \"swing\",\n            aspectRatio: false,\n            autoHide: false,\n            containment: false,\n            ghost: false,\n            grid: false,\n            handles: \"e,s,se\",\n            helper: false,\n            maxHeight: null,\n            maxWidth: null,\n            minHeight: 10,\n            minWidth: 10,\n            // See #7960\n            zIndex: 90,\n\n            // callbacks\n            resize: null,\n            start: null,\n            stop: null\n        },\n        _create: function () {\n\n            var n, i, handle, axis, hname,\n                that = this,\n                o = this.options;\n            this.element.addClass(\"ui-resizable\");\n\n            $.extend(this, {\n                _aspectRatio: !!(o.aspectRatio),\n                aspectRatio: o.aspectRatio,\n                originalElement: this.element,\n                _proportionallyResizeElements: [],\n                _helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\n            });\n\n            //Wrap the element if it cannot hold child nodes\n            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {\n\n                //Create a wrapper element and set the wrapper to the new current internal element\n                this.element.wrap(\n                    $(\"<div class='ui-wrapper' style='overflow: hidden;'></div>\").css({\n                        position: this.element.css(\"position\"),\n                        width: this.element.outerWidth(),\n                        height: this.element.outerHeight(),\n                        top: this.element.css(\"top\"),\n                        left: this.element.css(\"left\")\n                    })\n                );\n\n                //Overwrite the original this.element\n                this.element = this.element.parent().data(\n                    \"ui-resizable\", this.element.data(\"ui-resizable\")\n                );\n\n                this.elementIsWrapper = true;\n\n                //Move margins to the wrapper\n                this.element.css({\n                    marginLeft: this.originalElement.css(\"marginLeft\"),\n                    marginTop: this.originalElement.css(\"marginTop\"),\n                    marginRight: this.originalElement.css(\"marginRight\"),\n                    marginBottom: this.originalElement.css(\"marginBottom\")\n                });\n                this.originalElement.css({marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});\n\n                //Prevent Safari textarea resize\n                this.originalResizeStyle = this.originalElement.css(\"resize\");\n                this.originalElement.css(\"resize\", \"none\");\n\n                //Push the actual element to our proportionallyResize internal array\n                this._proportionallyResizeElements.push(this.originalElement.css({\n                    position: \"static\",\n                    zoom: 1,\n                    display: \"block\"\n                }));\n\n                // avoid IE jump (hard set the margin)\n                this.originalElement.css({margin: this.originalElement.css(\"margin\")});\n\n                // fix handlers offset\n                this._proportionallyResize();\n\n            }\n\n            this.handles = o.handles || (!$(\".ui-resizable-handle\", this.element).length ? \"e,s,se\" : {\n                n: \".ui-resizable-n\",\n                e: \".ui-resizable-e\",\n                s: \".ui-resizable-s\",\n                w: \".ui-resizable-w\",\n                se: \".ui-resizable-se\",\n                sw: \".ui-resizable-sw\",\n                ne: \".ui-resizable-ne\",\n                nw: \".ui-resizable-nw\"\n            });\n            if (this.handles.constructor === String) {\n\n                if (this.handles === \"all\") {\n                    this.handles = \"n,e,s,w,se,sw,ne,nw\";\n                }\n\n                n = this.handles.split(\",\");\n                this.handles = {};\n\n                for (i = 0; i < n.length; i++) {\n\n                    handle = $.trim(n[i]);\n                    hname = \"ui-resizable-\" + handle;\n                    axis = $(\"<div class='ui-resizable-handle \" + hname + \"'></div>\");\n\n                    // Apply zIndex to all handles - see #7960\n                    axis.css({zIndex: o.zIndex});\n\n                    //TODO : What's going on here?\n                    if (\"se\" === handle) {\n                        axis.addClass(\"ui-icon ui-icon-gripsmall-diagonal-se\");\n                    }\n\n                    //Insert into internal handles object and append to element\n                    this.handles[handle] = \".ui-resizable-\" + handle;\n                    this.element.append(axis);\n                }\n\n            }\n\n            this._renderAxis = function (target) {\n\n                var i, axis, padPos, padWrapper;\n\n                target = target || this.element;\n\n                for (i in this.handles) {\n\n                    if (this.handles[i].constructor === String) {\n                        this.handles[i] = $(this.handles[i], this.element).show();\n                    }\n\n                    //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)\n                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {\n\n                        axis = $(this.handles[i], this.element);\n\n                        //Checking the correct pad and border\n                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();\n\n                        //The padding type i have to apply...\n                        padPos = [\"padding\",\n                            /ne|nw|n/.test(i) ? \"Top\" :\n                                /se|sw|s/.test(i) ? \"Bottom\" :\n                                    /^e$/.test(i) ? \"Right\" : \"Left\"].join(\"\");\n\n                        target.css(padPos, padWrapper);\n\n                        this._proportionallyResize();\n\n                    }\n\n                    //TODO: What's that good for? There's not anything to be executed left\n                    if (!$(this.handles[i]).length) {\n                        continue;\n                    }\n                }\n            };\n\n            //TODO: make renderAxis a prototype function\n            this._renderAxis(this.element);\n\n            this._handles = $(\".ui-resizable-handle\", this.element)\n                .disableSelection();\n\n            //Matching axis name\n            this._handles.mouseover(function () {\n                if (!that.resizing) {\n                    if (this.className) {\n                        axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);\n                    }\n                    //Axis, default = se\n                    that.axis = axis && axis[1] ? axis[1] : \"se\";\n                }\n            });\n\n            //If we want to auto hide the elements\n            if (o.autoHide) {\n                this._handles.hide();\n                $(this.element)\n                    .addClass(\"ui-resizable-autohide\")\n                    .mouseenter(function () {\n                        if (o.disabled) {\n                            return;\n                        }\n                        $(this).removeClass(\"ui-resizable-autohide\");\n                        that._handles.show();\n                    })\n                    .mouseleave(function () {\n                        if (o.disabled) {\n                            return;\n                        }\n                        if (!that.resizing) {\n                            $(this).addClass(\"ui-resizable-autohide\");\n                            that._handles.hide();\n                        }\n                    });\n            }\n\n            //Initialize the mouse interaction\n            this._mouseInit();\n\n        },\n\n        _destroy: function () {\n\n            this._mouseDestroy();\n\n            var wrapper,\n                _destroy = function (exp) {\n                    $(exp).removeClass(\"ui-resizable ui-resizable-disabled ui-resizable-resizing\")\n                        .removeData(\"resizable\").removeData(\"ui-resizable\").unbind(\".resizable\").find(\".ui-resizable-handle\").remove();\n                };\n\n            //TODO: Unwrap at same DOM position\n            if (this.elementIsWrapper) {\n                _destroy(this.element);\n                wrapper = this.element;\n                this.originalElement.css({\n                    position: wrapper.css(\"position\"),\n                    width: wrapper.outerWidth(),\n                    height: wrapper.outerHeight(),\n                    top: wrapper.css(\"top\"),\n                    left: wrapper.css(\"left\")\n                }).insertAfter(wrapper);\n                wrapper.remove();\n            }\n\n            this.originalElement.css(\"resize\", this.originalResizeStyle);\n            _destroy(this.originalElement);\n\n            return this;\n        },\n\n        _mouseCapture: function (event) {\n            var i, handle,\n                capture = false;\n\n            for (i in this.handles) {\n                handle = $(this.handles[i])[0];\n                if (handle === event.target || $.contains(handle, event.target)) {\n                    capture = true;\n                }\n            }\n\n            return !this.options.disabled && capture;\n        },\n\n        _mouseStart: function (event) {\n\n            var curleft, curtop, cursor,\n                o = this.options,\n                iniPos = this.element.position(),\n                el = this.element;\n\n            this.resizing = true;\n\n            // bugfix for http://dev.jquery.com/ticket/1749\n            if ((/absolute/).test(el.css(\"position\"))) {\n                el.css({position: \"absolute\", top: el.css(\"top\"), left: el.css(\"left\")});\n            } else if (el.is(\".ui-draggable\")) {\n                el.css({position: \"absolute\", top: iniPos.top, left: iniPos.left});\n            }\n\n            this._renderProxy();\n\n            curleft = num(this.helper.css(\"left\"));\n            curtop = num(this.helper.css(\"top\"));\n\n            if (o.containment) {\n                curleft += $(o.containment).scrollLeft() || 0;\n                curtop += $(o.containment).scrollTop() || 0;\n            }\n\n            //Store needed variables\n            this.offset = this.helper.offset();\n            this.position = {left: curleft, top: curtop};\n            this.size = this._helper ? {width: this.helper.width(), height: this.helper.height()} : {\n                width: el.width(),\n                height: el.height()\n            };\n            this.originalSize = this._helper ? {width: el.outerWidth(), height: el.outerHeight()} : {\n                width: el.width(),\n                height: el.height()\n            };\n            this.originalPosition = {left: curleft, top: curtop};\n            this.sizeDiff = {width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height()};\n            this.originalMousePosition = {left: event.pageX, top: event.pageY};\n\n            //Aspect Ratio\n            this.aspectRatio = (typeof o.aspectRatio === \"number\") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);\n\n            cursor = $(\".ui-resizable-\" + this.axis).css(\"cursor\");\n            $(\"body\").css(\"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor);\n\n            el.addClass(\"ui-resizable-resizing\");\n            this._propagate(\"start\", event);\n            return true;\n        },\n\n        _mouseDrag: function (event) {\n\n            //Increase performance, avoid regex\n            var data,\n                el = this.helper, props = {},\n                smp = this.originalMousePosition,\n                a = this.axis,\n                prevTop = this.position.top,\n                prevLeft = this.position.left,\n                prevWidth = this.size.width,\n                prevHeight = this.size.height,\n                dx = (event.pageX - smp.left) || 0,\n                dy = (event.pageY - smp.top) || 0,\n                trigger = this._change[a];\n\n            if (!trigger) {\n                return false;\n            }\n\n            // Calculate the attrs that will be change\n            data = trigger.apply(this, [event, dx, dy]);\n\n            // Put this in the mouseDrag handler since the user can start pressing shift while resizing\n            this._updateVirtualBoundaries(event.shiftKey);\n            if (this._aspectRatio || event.shiftKey) {\n                data = this._updateRatio(data, event);\n            }\n\n            data = this._respectSize(data, event);\n\n            this._updateCache(data);\n\n            // plugins callbacks need to be called first\n            this._propagate(\"resize\", event);\n\n            if (this.position.top !== prevTop) {\n                props.top = this.position.top + \"px\";\n            }\n            if (this.position.left !== prevLeft) {\n                props.left = this.position.left + \"px\";\n            }\n            if (this.size.width !== prevWidth) {\n                props.width = this.size.width + \"px\";\n            }\n            if (this.size.height !== prevHeight) {\n                props.height = this.size.height + \"px\";\n            }\n            el.css(props);\n\n            if (!this._helper && this._proportionallyResizeElements.length) {\n                this._proportionallyResize();\n            }\n\n            // Call the user callback if the element was resized\n            if (!$.isEmptyObject(props)) {\n                this._trigger(\"resize\", event, this.ui());\n            }\n\n            return false;\n        },\n\n        _mouseStop: function (event) {\n\n            this.resizing = false;\n            var pr, ista, soffseth, soffsetw, s, left, top,\n                o = this.options, that = this;\n\n            if (this._helper) {\n\n                pr = this._proportionallyResizeElements;\n                ista = pr.length && (/textarea/i).test(pr[0].nodeName);\n                soffseth = ista && $.ui.hasScroll(pr[0], \"left\") /* TODO - jump height */ ? 0 : that.sizeDiff.height;\n                soffsetw = ista ? 0 : that.sizeDiff.width;\n\n                s = {width: (that.helper.width() - soffsetw), height: (that.helper.height() - soffseth)};\n                left = (parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left)) || null;\n                top = (parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top)) || null;\n\n                if (!o.animate) {\n                    this.element.css($.extend(s, {top: top, left: left}));\n                }\n\n                that.helper.height(that.size.height);\n                that.helper.width(that.size.width);\n\n                if (this._helper && !o.animate) {\n                    this._proportionallyResize();\n                }\n            }\n\n            $(\"body\").css(\"cursor\", \"auto\");\n\n            this.element.removeClass(\"ui-resizable-resizing\");\n\n            this._propagate(\"stop\", event);\n\n            if (this._helper) {\n                this.helper.remove();\n            }\n\n            return false;\n\n        },\n\n        _updateVirtualBoundaries: function (forceAspectRatio) {\n            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,\n                o = this.options;\n\n            b = {\n                minWidth: isNumber(o.minWidth) ? o.minWidth : 0,\n                maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,\n                minHeight: isNumber(o.minHeight) ? o.minHeight : 0,\n                maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity\n            };\n\n            if (this._aspectRatio || forceAspectRatio) {\n                // We want to create an enclosing box whose aspect ration is the requested one\n                // First, compute the \"projected\" size for each dimension based on the aspect ratio and other dimension\n                pMinWidth = b.minHeight * this.aspectRatio;\n                pMinHeight = b.minWidth / this.aspectRatio;\n                pMaxWidth = b.maxHeight * this.aspectRatio;\n                pMaxHeight = b.maxWidth / this.aspectRatio;\n\n                if (pMinWidth > b.minWidth) {\n                    b.minWidth = pMinWidth;\n                }\n                if (pMinHeight > b.minHeight) {\n                    b.minHeight = pMinHeight;\n                }\n                if (pMaxWidth < b.maxWidth) {\n                    b.maxWidth = pMaxWidth;\n                }\n                if (pMaxHeight < b.maxHeight) {\n                    b.maxHeight = pMaxHeight;\n                }\n            }\n            this._vBoundaries = b;\n        },\n\n        _updateCache: function (data) {\n            this.offset = this.helper.offset();\n            if (isNumber(data.left)) {\n                this.position.left = data.left;\n            }\n            if (isNumber(data.top)) {\n                this.position.top = data.top;\n            }\n            if (isNumber(data.height)) {\n                this.size.height = data.height;\n            }\n            if (isNumber(data.width)) {\n                this.size.width = data.width;\n            }\n        },\n\n        _updateRatio: function (data) {\n\n            var cpos = this.position,\n                csize = this.size,\n                a = this.axis;\n\n            if (isNumber(data.height)) {\n                data.width = (data.height * this.aspectRatio);\n            } else if (isNumber(data.width)) {\n                data.height = (data.width / this.aspectRatio);\n            }\n\n            if (a === \"sw\") {\n                data.left = cpos.left + (csize.width - data.width);\n                data.top = null;\n            }\n            if (a === \"nw\") {\n                data.top = cpos.top + (csize.height - data.height);\n                data.left = cpos.left + (csize.width - data.width);\n            }\n\n            return data;\n        },\n\n        _respectSize: function (data) {\n\n            var o = this._vBoundaries,\n                a = this.axis,\n                ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),\n                ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),\n                isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width),\n                isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),\n                dw = this.originalPosition.left + this.originalSize.width,\n                dh = this.position.top + this.size.height,\n                cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);\n            if (isminw) {\n                data.width = o.minWidth;\n            }\n            if (isminh) {\n                data.height = o.minHeight;\n            }\n            if (ismaxw) {\n                data.width = o.maxWidth;\n            }\n            if (ismaxh) {\n                data.height = o.maxHeight;\n            }\n\n            if (isminw && cw) {\n                data.left = dw - o.minWidth;\n            }\n            if (ismaxw && cw) {\n                data.left = dw - o.maxWidth;\n            }\n            if (isminh && ch) {\n                data.top = dh - o.minHeight;\n            }\n            if (ismaxh && ch) {\n                data.top = dh - o.maxHeight;\n            }\n\n            // fixing jump error on top/left - bug #2330\n            if (!data.width && !data.height && !data.left && data.top) {\n                data.top = null;\n            } else if (!data.width && !data.height && !data.top && data.left) {\n                data.left = null;\n            }\n\n            return data;\n        },\n\n        _proportionallyResize: function () {\n\n            if (!this._proportionallyResizeElements.length) {\n                return;\n            }\n\n            var i, j, borders, paddings, prel,\n                element = this.helper || this.element;\n\n            for (i = 0; i < this._proportionallyResizeElements.length; i++) {\n\n                prel = this._proportionallyResizeElements[i];\n\n                if (!this.borderDif) {\n                    this.borderDif = [];\n                    borders = [prel.css(\"borderTopWidth\"), prel.css(\"borderRightWidth\"), prel.css(\"borderBottomWidth\"), prel.css(\"borderLeftWidth\")];\n                    paddings = [prel.css(\"paddingTop\"), prel.css(\"paddingRight\"), prel.css(\"paddingBottom\"), prel.css(\"paddingLeft\")];\n\n                    for (j = 0; j < borders.length; j++) {\n                        this.borderDif[j] = (parseInt(borders[j], 10) || 0) + (parseInt(paddings[j], 10) || 0);\n                    }\n                }\n\n                prel.css({\n                    height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,\n                    width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0\n                });\n\n            }\n\n        },\n\n        _renderProxy: function () {\n\n            var el = this.element, o = this.options;\n            this.elementOffset = el.offset();\n\n            if (this._helper) {\n\n                this.helper = this.helper || $(\"<div style='overflow:hidden;'></div>\");\n\n                this.helper.addClass(this._helper).css({\n                    width: this.element.outerWidth() - 1,\n                    height: this.element.outerHeight() - 1,\n                    position: \"absolute\",\n                    left: this.elementOffset.left + \"px\",\n                    top: this.elementOffset.top + \"px\",\n                    zIndex: ++o.zIndex //TODO: Don't modify option\n                });\n\n                this.helper\n                    .appendTo(\"body\")\n                    .disableSelection();\n\n            } else {\n                this.helper = this.element;\n            }\n\n        },\n\n        _change: {\n            e: function (event, dx) {\n                return {width: this.originalSize.width + dx};\n            },\n            w: function (event, dx) {\n                var cs = this.originalSize, sp = this.originalPosition;\n                return {left: sp.left + dx, width: cs.width - dx};\n            },\n            n: function (event, dx, dy) {\n                var cs = this.originalSize, sp = this.originalPosition;\n                return {top: sp.top + dy, height: cs.height - dy};\n            },\n            s: function (event, dx, dy) {\n                return {height: this.originalSize.height + dy};\n            },\n            se: function (event, dx, dy) {\n                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n            },\n            sw: function (event, dx, dy) {\n                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n            },\n            ne: function (event, dx, dy) {\n                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));\n            },\n            nw: function (event, dx, dy) {\n                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));\n            }\n        },\n\n        _propagate: function (n, event) {\n            $.ui.plugin.call(this, n, [event, this.ui()]);\n            (n !== \"resize\" && this._trigger(n, event, this.ui()));\n        },\n\n        plugins: {},\n\n        ui: function () {\n            return {\n                originalElement: this.originalElement,\n                element: this.element,\n                helper: this.helper,\n                position: this.position,\n                size: this.size,\n                originalSize: this.originalSize,\n                originalPosition: this.originalPosition\n            };\n        }\n\n    });\n\n    /*\n     * Resizable Extensions\n     */\n\n    $.ui.plugin.add(\"resizable\", \"animate\", {\n\n        stop: function (event) {\n            var that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                pr = that._proportionallyResizeElements,\n                ista = pr.length && (/textarea/i).test(pr[0].nodeName),\n                soffseth = ista && $.ui.hasScroll(pr[0], \"left\") /* TODO - jump height */ ? 0 : that.sizeDiff.height,\n                soffsetw = ista ? 0 : that.sizeDiff.width,\n                style = {width: (that.size.width - soffsetw), height: (that.size.height - soffseth)},\n                left = (parseInt(that.element.css(\"left\"), 10) + (that.position.left - that.originalPosition.left)) || null,\n                top = (parseInt(that.element.css(\"top\"), 10) + (that.position.top - that.originalPosition.top)) || null;\n\n            that.element.animate(\n                $.extend(style, top && left ? {top: top, left: left} : {}), {\n                    duration: o.animateDuration,\n                    easing: o.animateEasing,\n                    step: function () {\n\n                        var data = {\n                            width: parseInt(that.element.css(\"width\"), 10),\n                            height: parseInt(that.element.css(\"height\"), 10),\n                            top: parseInt(that.element.css(\"top\"), 10),\n                            left: parseInt(that.element.css(\"left\"), 10)\n                        };\n\n                        if (pr && pr.length) {\n                            $(pr[0]).css({width: data.width, height: data.height});\n                        }\n\n                        // propagating resize, and updating values for each animation step\n                        that._updateCache(data);\n                        that._propagate(\"resize\", event);\n\n                    }\n                }\n            );\n        }\n\n    });\n\n    $.ui.plugin.add(\"resizable\", \"containment\", {\n\n        start: function () {\n            var element, p, co, ch, cw, width, height,\n                that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                el = that.element,\n                oc = o.containment,\n                ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;\n\n            if (!ce) {\n                return;\n            }\n\n            that.containerElement = $(ce);\n\n            if (/document/.test(oc) || oc === document) {\n                that.containerOffset = {left: 0, top: 0};\n                that.containerPosition = {left: 0, top: 0};\n\n                that.parentData = {\n                    element: $(document), left: 0, top: 0,\n                    width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight\n                };\n            }\n\n            // i'm a node, so compute top, left, right, bottom\n            else {\n                element = $(ce);\n                p = [];\n                $([\"Top\", \"Right\", \"Left\", \"Bottom\"]).each(function (i, name) {\n                    p[i] = num(element.css(\"padding\" + name));\n                });\n\n                that.containerOffset = element.offset();\n                that.containerPosition = element.position();\n                that.containerSize = {height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1])};\n\n                co = that.containerOffset;\n                ch = that.containerSize.height;\n                cw = that.containerSize.width;\n                width = ($.ui.hasScroll(ce, \"left\") ? ce.scrollWidth : cw);\n                height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);\n\n                that.parentData = {\n                    element: ce, left: co.left, top: co.top, width: width, height: height\n                };\n            }\n        },\n\n        resize: function (event) {\n            var woset, hoset, isParent, isOffsetRelative,\n                that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                co = that.containerOffset, cp = that.position,\n                pRatio = that._aspectRatio || event.shiftKey,\n                cop = {top: 0, left: 0}, ce = that.containerElement;\n\n            if (ce[0] !== document && (/static/).test(ce.css(\"position\"))) {\n                cop = co;\n            }\n\n            if (cp.left < (that._helper ? co.left : 0)) {\n                that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));\n                if (pRatio) {\n                    that.size.height = that.size.width / that.aspectRatio;\n                }\n                that.position.left = o.helper ? co.left : 0;\n            }\n\n            if (cp.top < (that._helper ? co.top : 0)) {\n                that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);\n                if (pRatio) {\n                    that.size.width = that.size.height * that.aspectRatio;\n                }\n                that.position.top = that._helper ? co.top : 0;\n            }\n\n            that.offset.left = that.parentData.left + that.position.left;\n            that.offset.top = that.parentData.top + that.position.top;\n\n            woset = Math.abs((that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width);\n            hoset = Math.abs((that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height);\n\n            isParent = that.containerElement.get(0) === that.element.parent().get(0);\n            isOffsetRelative = /relative|absolute/.test(that.containerElement.css(\"position\"));\n\n            if (isParent && isOffsetRelative) {\n                woset -= Math.abs(that.parentData.left);\n            }\n\n            if (woset + that.size.width >= that.parentData.width) {\n                that.size.width = that.parentData.width - woset;\n                if (pRatio) {\n                    that.size.height = that.size.width / that.aspectRatio;\n                }\n            }\n\n            if (hoset + that.size.height >= that.parentData.height) {\n                that.size.height = that.parentData.height - hoset;\n                if (pRatio) {\n                    that.size.width = that.size.height * that.aspectRatio;\n                }\n            }\n        },\n\n        stop: function () {\n            var that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                co = that.containerOffset,\n                cop = that.containerPosition,\n                ce = that.containerElement,\n                helper = $(that.helper),\n                ho = helper.offset(),\n                w = helper.outerWidth() - that.sizeDiff.width,\n                h = helper.outerHeight() - that.sizeDiff.height;\n\n            if (that._helper && !o.animate && (/relative/).test(ce.css(\"position\"))) {\n                $(this).css({left: ho.left - cop.left - co.left, width: w, height: h});\n            }\n\n            if (that._helper && !o.animate && (/static/).test(ce.css(\"position\"))) {\n                $(this).css({left: ho.left - cop.left - co.left, width: w, height: h});\n            }\n\n        }\n    });\n\n    $.ui.plugin.add(\"resizable\", \"alsoResize\", {\n\n        start: function () {\n            var that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                _store = function (exp) {\n                    $(exp).each(function () {\n                        var el = $(this);\n                        el.data(\"ui-resizable-alsoresize\", {\n                            width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),\n                            left: parseInt(el.css(\"left\"), 10), top: parseInt(el.css(\"top\"), 10)\n                        });\n                    });\n                };\n\n            if (typeof (o.alsoResize) === \"object\" && !o.alsoResize.parentNode) {\n                if (o.alsoResize.length) {\n                    o.alsoResize = o.alsoResize[0];\n                    _store(o.alsoResize);\n                } else {\n                    $.each(o.alsoResize, function (exp) {\n                        _store(exp);\n                    });\n                }\n            } else {\n                _store(o.alsoResize);\n            }\n        },\n\n        resize: function (event, ui) {\n            var that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                os = that.originalSize,\n                op = that.originalPosition,\n                delta = {\n                    height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,\n                    top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0\n                },\n\n                _alsoResize = function (exp, c) {\n                    $(exp).each(function () {\n                        var el = $(this), start = $(this).data(\"ui-resizable-alsoresize\"), style = {},\n                            css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [\"width\", \"height\"] : [\"width\", \"height\", \"top\", \"left\"];\n\n                        $.each(css, function (i, prop) {\n                            var sum = (start[prop] || 0) + (delta[prop] || 0);\n                            if (sum && sum >= 0) {\n                                style[prop] = sum || null;\n                            }\n                        });\n\n                        el.css(style);\n                    });\n                };\n\n            if (typeof (o.alsoResize) === \"object\" && !o.alsoResize.nodeType) {\n                $.each(o.alsoResize, function (exp, c) {\n                    _alsoResize(exp, c);\n                });\n            } else {\n                _alsoResize(o.alsoResize);\n            }\n        },\n\n        stop: function () {\n            $(this).removeData(\"resizable-alsoresize\");\n        }\n    });\n\n    $.ui.plugin.add(\"resizable\", \"ghost\", {\n\n        start: function () {\n\n            var that = $(this).data(\"ui-resizable\"), o = that.options, cs = that.size;\n\n            that.ghost = that.originalElement.clone();\n            that.ghost\n                .css({\n                    opacity: 0.25,\n                    display: \"block\",\n                    position: \"relative\",\n                    height: cs.height,\n                    width: cs.width,\n                    margin: 0,\n                    left: 0,\n                    top: 0\n                })\n                .addClass(\"ui-resizable-ghost\")\n                .addClass(typeof o.ghost === \"string\" ? o.ghost : \"\");\n\n            that.ghost.appendTo(that.helper);\n\n        },\n\n        resize: function () {\n            var that = $(this).data(\"ui-resizable\");\n            if (that.ghost) {\n                that.ghost.css({position: \"relative\", height: that.size.height, width: that.size.width});\n            }\n        },\n\n        stop: function () {\n            var that = $(this).data(\"ui-resizable\");\n            if (that.ghost && that.helper) {\n                that.helper.get(0).removeChild(that.ghost.get(0));\n            }\n        }\n\n    });\n\n    $.ui.plugin.add(\"resizable\", \"grid\", {\n\n        resize: function () {\n            var that = $(this).data(\"ui-resizable\"),\n                o = that.options,\n                cs = that.size,\n                os = that.originalSize,\n                op = that.originalPosition,\n                a = that.axis,\n                grid = typeof o.grid === \"number\" ? [o.grid, o.grid] : o.grid,\n                gridX = (grid[0] || 1),\n                gridY = (grid[1] || 1),\n                ox = Math.round((cs.width - os.width) / gridX) * gridX,\n                oy = Math.round((cs.height - os.height) / gridY) * gridY,\n                newWidth = os.width + ox,\n                newHeight = os.height + oy,\n                isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),\n                isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),\n                isMinWidth = o.minWidth && (o.minWidth > newWidth),\n                isMinHeight = o.minHeight && (o.minHeight > newHeight);\n\n            o.grid = grid;\n\n            if (isMinWidth) {\n                newWidth = newWidth + gridX;\n            }\n            if (isMinHeight) {\n                newHeight = newHeight + gridY;\n            }\n            if (isMaxWidth) {\n                newWidth = newWidth - gridX;\n            }\n            if (isMaxHeight) {\n                newHeight = newHeight - gridY;\n            }\n\n            if (/^(se|s|e)$/.test(a)) {\n                that.size.width = newWidth;\n                that.size.height = newHeight;\n            } else if (/^(ne)$/.test(a)) {\n                that.size.width = newWidth;\n                that.size.height = newHeight;\n                that.position.top = op.top - oy;\n            } else if (/^(sw)$/.test(a)) {\n                that.size.width = newWidth;\n                that.size.height = newHeight;\n                that.position.left = op.left - ox;\n            } else {\n                if (newHeight - gridY > 0) {\n                    that.size.height = newHeight;\n                    that.position.top = op.top - oy;\n                } else {\n                    that.size.height = gridY;\n                    that.position.top = op.top + os.height - gridY;\n                }\n                if (newWidth - gridX > 0) {\n                    that.size.width = newWidth;\n                    that.position.left = op.left - ox;\n                } else {\n                    that.size.width = gridX;\n                    that.position.left = op.left + os.width - gridX;\n                }\n            }\n        }\n\n    });\n\n});\n"}
}});
