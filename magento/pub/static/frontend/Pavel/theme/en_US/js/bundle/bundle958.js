require.config({"config": {
        "jsbuild":{"jquery/ui-modules/tooltip.js":"/*!\n * jQuery UI Tooltip - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/tooltip/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget',\n    'jquery-ui-modules/position'\n], function ($) {\n\n    var increments = 0;\n\n    function addDescribedBy(elem, id) {\n        var describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/);\n        describedby.push(id);\n        elem\n            .data(\"ui-tooltip-id\", id)\n            .attr(\"aria-describedby\", $.trim(describedby.join(\" \")));\n    }\n\n    function removeDescribedBy(elem) {\n        var id = elem.data(\"ui-tooltip-id\"),\n            describedby = (elem.attr(\"aria-describedby\") || \"\").split(/\\s+/),\n            index = $.inArray(id, describedby);\n        if (index !== -1) {\n            describedby.splice(index, 1);\n        }\n\n        elem.removeData(\"ui-tooltip-id\");\n        describedby = $.trim(describedby.join(\" \"));\n        if (describedby) {\n            elem.attr(\"aria-describedby\", describedby);\n        } else {\n            elem.removeAttr(\"aria-describedby\");\n        }\n    }\n\n    $.widget(\"ui.tooltip\", {\n        version: \"1.10.4\",\n        options: {\n            content: function () {\n                // support: IE<9, Opera in jQuery <1.7\n                // .text() can't accept undefined, so coerce to a string\n                var title = $(this).attr(\"title\") || \"\";\n                // Escape title, since we're going from an attribute to raw HTML\n                return $(\"<a>\").text(title).html();\n            },\n            hide: true,\n            // Disabled elements have inconsistent behavior across browsers (#8661)\n            items: \"[title]:not([disabled])\",\n            position: {\n                my: \"left top+15\",\n                at: \"left bottom\",\n                collision: \"flipfit flip\"\n            },\n            show: true,\n            tooltipClass: null,\n            track: false,\n\n            // callbacks\n            close: null,\n            open: null\n        },\n\n        _create: function () {\n            this._on({\n                mouseover: \"open\",\n                focusin: \"open\"\n            });\n\n            // IDs of generated tooltips, needed for destroy\n            this.tooltips = {};\n            // IDs of parent tooltips where we removed the title attribute\n            this.parents = {};\n\n            if (this.options.disabled) {\n                this._disable();\n            }\n        },\n\n        _setOption: function (key, value) {\n            var that = this;\n\n            if (key === \"disabled\") {\n                this[value ? \"_disable\" : \"_enable\"]();\n                this.options[key] = value;\n                // disable element style changes\n                return;\n            }\n\n            this._super(key, value);\n\n            if (key === \"content\") {\n                $.each(this.tooltips, function (id, element) {\n                    that._updateContent(element);\n                });\n            }\n        },\n\n        _disable: function () {\n            var that = this;\n\n            // close open tooltips\n            $.each(this.tooltips, function (id, element) {\n                var event = $.Event(\"blur\");\n                event.target = event.currentTarget = element[0];\n                that.close(event, true);\n            });\n\n            // remove title attributes to prevent native tooltips\n            this.element.find(this.options.items).addBack().each(function () {\n                var element = $(this);\n                if (element.is(\"[title]\")) {\n                    element\n                        .data(\"ui-tooltip-title\", element.attr(\"title\"))\n                        .attr(\"title\", \"\");\n                }\n            });\n        },\n\n        _enable: function () {\n            // restore title attributes\n            this.element.find(this.options.items).addBack().each(function () {\n                var element = $(this);\n                if (element.data(\"ui-tooltip-title\")) {\n                    element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n                }\n            });\n        },\n\n        open: function (event) {\n            var that = this,\n                target = $(event ? event.target : this.element)\n                // we need closest here due to mouseover bubbling,\n                // but always pointing at the same event target\n                    .closest(this.options.items);\n\n            // No element to show a tooltip for or the tooltip is already open\n            if (!target.length || target.data(\"ui-tooltip-id\")) {\n                return;\n            }\n\n            if (target.attr(\"title\")) {\n                target.data(\"ui-tooltip-title\", target.attr(\"title\"));\n            }\n\n            target.data(\"ui-tooltip-open\", true);\n\n            // kill parent tooltips, custom or native, for hover\n            if (event && event.type === \"mouseover\") {\n                target.parents().each(function () {\n                    var parent = $(this),\n                        blurEvent;\n                    if (parent.data(\"ui-tooltip-open\")) {\n                        blurEvent = $.Event(\"blur\");\n                        blurEvent.target = blurEvent.currentTarget = this;\n                        that.close(blurEvent, true);\n                    }\n                    if (parent.attr(\"title\")) {\n                        parent.uniqueId();\n                        that.parents[this.id] = {\n                            element: this,\n                            title: parent.attr(\"title\")\n                        };\n                        parent.attr(\"title\", \"\");\n                    }\n                });\n            }\n\n            this._updateContent(target, event);\n        },\n\n        _updateContent: function (target, event) {\n            var content,\n                contentOption = this.options.content,\n                that = this,\n                eventType = event ? event.type : null;\n\n            if (typeof contentOption === \"string\") {\n                return this._open(event, target, contentOption);\n            }\n\n            content = contentOption.call(target[0], function (response) {\n                // ignore async response if tooltip was closed already\n                if (!target.data(\"ui-tooltip-open\")) {\n                    return;\n                }\n                // IE may instantly serve a cached response for ajax requests\n                // delay this call to _open so the other call to _open runs first\n                that._delay(function () {\n                    // jQuery creates a special event for focusin when it doesn't\n                    // exist natively. To improve performance, the native event\n                    // object is reused and the type is changed. Therefore, we can't\n                    // rely on the type being correct after the event finished\n                    // bubbling, so we set it back to the previous value. (#8740)\n                    if (event) {\n                        event.type = eventType;\n                    }\n                    this._open(event, target, response);\n                });\n            });\n            if (content) {\n                this._open(event, target, content);\n            }\n        },\n\n        _open: function (event, target, content) {\n            var tooltip, events, delayedShow,\n                positionOption = $.extend({}, this.options.position);\n\n            if (!content) {\n                return;\n            }\n\n            // Content can be updated multiple times. If the tooltip already\n            // exists, then just update the content and bail.\n            tooltip = this._find(target);\n            if (tooltip.length) {\n                tooltip.find(\".ui-tooltip-content\").html(content);\n                return;\n            }\n\n            // if we have a title, clear it to prevent the native tooltip\n            // we have to check first to avoid defining a title if none exists\n            // (we don't want to cause an element to start matching [title])\n            //\n            // We use removeAttr only for key events, to allow IE to export the correct\n            // accessible attributes. For mouse events, set to empty string to avoid\n            // native tooltip showing up (happens only when removing inside mouseover).\n            if (target.is(\"[title]\")) {\n                if (event && event.type === \"mouseover\") {\n                    target.attr(\"title\", \"\");\n                } else {\n                    target.removeAttr(\"title\");\n                }\n            }\n\n            tooltip = this._tooltip(target);\n            addDescribedBy(target, tooltip.attr(\"id\"));\n            tooltip.find(\".ui-tooltip-content\").html(content);\n\n            function position(event) {\n                positionOption.of = event;\n                if (tooltip.is(\":hidden\")) {\n                    return;\n                }\n                tooltip.position(positionOption);\n            }\n\n            if (this.options.track && event && /^mouse/.test(event.type)) {\n                this._on(this.document, {\n                    mousemove: position\n                });\n                // trigger once to override element-relative positioning\n                position(event);\n            } else {\n                tooltip.position($.extend({\n                    of: target\n                }, this.options.position));\n            }\n\n            tooltip.hide();\n\n            this._show(tooltip, this.options.show);\n            // Handle tracking tooltips that are shown with a delay (#8644). As soon\n            // as the tooltip is visible, position the tooltip using the most recent\n            // event.\n            if (this.options.show && this.options.show.delay) {\n                delayedShow = this.delayedShow = setInterval(function () {\n                    if (tooltip.is(\":visible\")) {\n                        position(positionOption.of);\n                        clearInterval(delayedShow);\n                    }\n                }, $.fx.interval);\n            }\n\n            this._trigger(\"open\", event, {tooltip: tooltip});\n\n            events = {\n                keyup: function (event) {\n                    if (event.keyCode === $.ui.keyCode.ESCAPE) {\n                        var fakeEvent = $.Event(event);\n                        fakeEvent.currentTarget = target[0];\n                        this.close(fakeEvent, true);\n                    }\n                },\n                remove: function () {\n                    this._removeTooltip(tooltip);\n                }\n            };\n            if (!event || event.type === \"mouseover\") {\n                events.mouseleave = \"close\";\n            }\n            if (!event || event.type === \"focusin\") {\n                events.focusout = \"close\";\n            }\n            this._on(true, target, events);\n        },\n\n        close: function (event) {\n            var that = this,\n                target = $(event ? event.currentTarget : this.element),\n                tooltip = this._find(target);\n\n            // disabling closes the tooltip, so we need to track when we're closing\n            // to avoid an infinite loop in case the tooltip becomes disabled on close\n            if (this.closing) {\n                return;\n            }\n\n            // Clear the interval for delayed tracking tooltips\n            clearInterval(this.delayedShow);\n\n            // only set title if we had one before (see comment in _open())\n            if (target.data(\"ui-tooltip-title\")) {\n                target.attr(\"title\", target.data(\"ui-tooltip-title\"));\n            }\n\n            removeDescribedBy(target);\n\n            tooltip.stop(true);\n            this._hide(tooltip, this.options.hide, function () {\n                that._removeTooltip($(this));\n            });\n\n            target.removeData(\"ui-tooltip-open\");\n            this._off(target, \"mouseleave focusout keyup\");\n            // Remove 'remove' binding only on delegated targets\n            if (target[0] !== this.element[0]) {\n                this._off(target, \"remove\");\n            }\n            this._off(this.document, \"mousemove\");\n\n            if (event && event.type === \"mouseleave\") {\n                $.each(this.parents, function (id, parent) {\n                    $(parent.element).attr(\"title\", parent.title);\n                    delete that.parents[id];\n                });\n            }\n\n            this.closing = true;\n            this._trigger(\"close\", event, {tooltip: tooltip});\n            this.closing = false;\n        },\n\n        _tooltip: function (element) {\n            var id = \"ui-tooltip-\" + increments++,\n                tooltip = $(\"<div>\")\n                    .attr({\n                        id: id,\n                        role: \"tooltip\"\n                    })\n                    .addClass(\"ui-tooltip ui-widget ui-corner-all ui-widget-content \" +\n                        (this.options.tooltipClass || \"\"));\n            $(\"<div>\")\n                .addClass(\"ui-tooltip-content\")\n                .appendTo(tooltip);\n            tooltip.appendTo(this.document[0].body);\n            this.tooltips[id] = element;\n            return tooltip;\n        },\n\n        _find: function (target) {\n            var id = target.data(\"ui-tooltip-id\");\n            return id ? $(\"#\" + id) : $();\n        },\n\n        _removeTooltip: function (tooltip) {\n            tooltip.remove();\n            delete this.tooltips[tooltip.attr(\"id\")];\n        },\n\n        _destroy: function () {\n            var that = this;\n\n            // close open tooltips\n            $.each(this.tooltips, function (id, element) {\n                // Delegate to close method to handle common cleanup\n                var event = $.Event(\"blur\");\n                event.target = event.currentTarget = element[0];\n                that.close(event, true);\n\n                // Remove immediately; destroying an open tooltip doesn't use the\n                // hide animation\n                $(\"#\" + id).remove();\n\n                // Restore the title\n                if (element.data(\"ui-tooltip-title\")) {\n                    element.attr(\"title\", element.data(\"ui-tooltip-title\"));\n                    element.removeData(\"ui-tooltip-title\");\n                }\n            });\n        }\n    });\n\n});\n"}
}});
