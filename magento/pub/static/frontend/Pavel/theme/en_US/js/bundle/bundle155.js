require.config({"config": {
        "jsbuild":{"Magento_Catalog/js/zoom.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @deprecated since version 2.2.0\n */\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.zoom', {\n        options: {\n            sliderSpeed: 10\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this.sliderMax = $(this.options.sliderSelector).width();\n            this.image = this.element;\n            this.imageWidth = this.image.width();\n            this.imageHeight = this.image.height();\n            this.imageParent = this.image.parent();\n            this.imageParentWidth = this.imageParent.width();\n            this.imageParentHeight = this.imageParent.height();\n            this.showFullImage = false;\n\n            if (!this._isZoomable()) {\n                return;\n            }\n            this._initialResize();\n\n            // Slide slider to zoom in or out the picture\n            this.slider = $(this.options.sliderSelector).slider({\n                value: 0,\n                min: 0,\n                max: this.sliderMax,\n                slide: $.proxy(function (event, ui) {\n                    this._zoom(ui.value, this.sliderMax);\n                }, this),\n                change: $.proxy(function (event, ui) {\n                    this._zoom(ui.value, this.sliderMax);\n                }, this)\n            });\n\n            // Mousedown on zoom in icon to zoom in picture\n            $(this.options.zoomInSelector).on('mousedown', $.proxy(function () {\n                this.intervalId = setInterval($.proxy(function () {\n                    this.slider.slider('value', this.slider.slider('value') + 1);\n                }, this), this.options.sliderSpeed);\n            }, this)).on('mouseup mouseleave', $.proxy(function () {\n                clearInterval(this.intervalId);\n            }, this));\n\n            // Mousedown on zoom out icon to zoom out picture\n            $(this.options.zoomOutSelector).on('mousedown', $.proxy(function () {\n                this.intervalId = setInterval($.proxy(function () {\n                    this.slider.slider('value', this.slider.slider('value') - 1);\n                }, this), this.options.sliderSpeed);\n            }, this)).on('mouseup mouseleave', $.proxy(function () {\n                clearInterval(this.intervalId);\n            }, this));\n\n            // Double-click image to see full picture\n            this.element.on('dblclick', $.proxy(function () {\n                var ratio;\n\n                this.showFullImage = !this.showFullImage;\n                ratio = this.showFullImage ? this.sliderMax : this.slider.slider('value');\n                this._zoom(ratio, this.sliderMax);\n\n                if (this.showFullImage) {\n                    $(this.options.sliderSelector).hide();\n                    $(this.options.zoomInSelector).hide();\n                    $(this.options.zoomOutSelector).hide();\n                    this.imageParent.css({\n                        'overflow': 'visible',\n                        'zIndex': '1000'\n                    });\n                } else {\n                    $(this.options.sliderSelector).show();\n                    $(this.options.zoomInSelector).show();\n                    $(this.options.zoomOutSelector).show();\n                    this.imageParent.css({\n                        'overflow': 'hidden',\n                        'zIndex': '9'\n                    });\n                }\n            }, this));\n\n            // Window resize will change offset for draggable\n            $(window).resize(this._draggableImage());\n        },\n\n        /**\n         * If image dimension is smaller than parent container, disable zoom.\n         *\n         * @private\n         * @return {Boolean}\n         */\n        _isZoomable: function () {\n            if (this.imageWidth <= this.imageParentWidth && this.imageHeight <= this.imageParentHeight) {\n                $(this.options.sliderSelector).parent().hide();\n                $(this.options.zoomNoticeSelector).hide();\n\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * Resize image to fit parent container and set initial image dimension\n         * @private\n         */\n        _initialResize: function () {\n            if (this.imageWidth > this.imageHeight) {\n                this.ceilingZoom = this.imageWidth / this.imageParentWidth;\n                this.image.width(this.imageParentWidth);\n                this.image.css('top', ((this.imageParentHeight - this.image.height()) / 2) + 'px');//eslint-disable-line\n            } else {\n                this.ceilingZoom = this.imageHeight / this.imageParentHeight;\n                this.image.height(this.imageParentHeight);\n                this.image.css('left', ((this.imageParentWidth - this.image.width()) / 2) + 'px');//eslint-disable-line\n            }\n            // Remember Image original position\n            this.imageInitTop = this.image.position().top;\n            this.imageInitLeft = this.image.position().left;\n        },\n\n        /**\n         * Make Image draggable inside parent container dimension\n         * @private\n         */\n        _draggableImage: function () {\n            var topX = this.image.offset().left,\n                topY = this.image.offset().top,\n                bottomX = this.image.offset().left,\n                bottomY = this.image.offset().top;\n\n            // Calculate x offset if image width is greater than image container width\n            if (this.image.width() > this.imageParentWidth) {\n                topX = this.image.width() - (this.imageParent.offset().left -\n                    this.image.offset().left) - this.imageParentWidth;\n                topX = this.image.offset().left - topX;\n                bottomX = this.imageParent.offset().left - this.image.offset().left;\n                bottomX = this.image.offset().left + bottomX;\n            }\n            // Calculate y offset if image height is greater than image container height\n            if (this.image.height() > this.imageParentHeight) {\n                topY = this.image.height() - (this.imageParent.offset().top -\n                    this.image.offset().top) - this.imageParentHeight;\n                topY = this.image.offset().top - topY;\n                bottomY = this.imageParent.offset().top - this.image.offset().top;\n                bottomY = this.image.offset().top + bottomY;\n            }\n            // containment field is used because image is larger than parent container\n            this.element.draggable({\n                containment: [topX, topY, bottomX, bottomY],\n                scroll: false\n            });\n        },\n\n        /**\n         * Resize image based on slider position\n         * @param {Number} sliderPosition - current slider position (0 to slider track max length)\n         * @param {Number} sliderLength - slider track max length\n         * @private\n         */\n        _zoom: function (sliderPosition, sliderLength) {\n            var ratio = sliderPosition / sliderLength,\n                floorZoom = 1,\n                imageOldLeft, imageOldTop, imageOldWidth, imageOldHeight, overSize, imageZoom, imageNewLeft,\n                imageNewTop;\n\n            ratio = ratio > 1 ? 1 : ratio;\n            imageOldLeft = this.image.position().left;\n            imageOldTop = this.image.position().top;\n            imageOldWidth = this.image.width();\n            imageOldHeight = this.image.height();\n            overSize = this.imageWidth > this.imageParentWidth || this.imageHeight > this.imageParentHeight;\n            imageZoom = floorZoom + (ratio * (this.ceilingZoom - floorZoom)); //eslint-disable-line no-extra-parens\n            // Zoomed image is larger than container, and resize image based on zoom ratio\n            if (overSize) {\n                this.imageWidth > this.imageHeight ? this.image.width(imageZoom * this.imageParentWidth) :\n                    this.image.height(imageZoom * this.imageParentHeight);\n            } else {\n                $(this.options.sliderSelector).hide();\n            }\n            // Position zoomed image properly\n            imageNewLeft = imageOldLeft - (this.image.width() - imageOldWidth) / 2;\n            imageNewTop = imageOldTop - (this.image.height() - imageOldHeight) / 2;\n            // Image can't be positioned more left than original left\n            if (imageNewLeft > this.imageInitLeft || this.image.width() < this.imageParentWidth) {\n                imageNewLeft = this.imageInitLeft;\n            }\n            // Image can't be positioned more right than the difference between parent width and image current width\n            if (Math.abs(imageNewLeft) > Math.abs(this.imageParentWidth - this.image.width())) {\n                imageNewLeft = this.imageParentWidth - this.image.width();\n            }\n            // Image can't be positioned more down than original top\n            if (imageNewTop > this.imageInitTop || this.image.height() < this.imageParentHeight) {\n                imageNewTop = this.imageInitTop;\n            }\n            // Image can't be positioned more top than the difference between parent height and image current height\n            if (Math.abs(imageNewTop) > Math.abs(this.imageParentHeight - this.image.height())) {\n                imageNewTop = this.imageParentHeight - this.image.height();\n            }\n            this.image.css({\n                'left': imageNewLeft + 'px',\n                'top': imageNewTop + 'px'\n            });\n            // Because image size and position changed, we need to recalculate draggable image containment\n            this._draggableImage();\n        }\n    });\n});\n"}
}});
