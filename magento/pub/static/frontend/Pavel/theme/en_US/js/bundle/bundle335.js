require.config({"config": {
        "jsbuild":{"mage/webapi.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @deprecated since version 2.2.0\n */\ndefine([\n    'jquery',\n    'mage/mage'\n], function ($) {\n    'use strict';\n\n    /**\n     * Webapi object constructor\n     *\n     * @param {String} baseUrl - Base URL\n     * @param {Object|undefined} ajaxArgs - Arguments for AJAX API call\n     * @see http://api.jquery.com/jQuery.ajax/\n     * @returns {{method: Object, call: Function}}\n     */\n    $.mage.Webapi = function (baseUrl, ajaxArgs) {\n        var validMethods;\n\n        /**\n         * Resource-related parameters. Further extended by other domain objects like Product, etc.\n         *\n         * @const\n         * @type {Object}\n         */\n        this.resource = {\n            uri: {\n                base: '', // Initialized below\n                api: '/webapi/rest'\n            }\n        };\n\n        /**\n         * @const\n         * @type {Object}\n         */\n        this.method = {\n            'create': 'POST',\n            'update': 'PUT',\n            'get': 'GET',\n            'delete': 'DELETE'\n        };\n\n        validMethods = [this.method.create, this.method.update, this.method.get, this.method['delete']];\n\n        // Check whether passed options comply with what we allow\n        if (ajaxArgs && typeof ajaxArgs !== 'object') {\n            throw 'ajaxArgs expected to be object';\n        }\n\n        if (!(baseUrl && typeof baseUrl === 'string')) {\n            throw 'String baseUrl parameter required';\n        }\n\n        // Ensure that baseUrl doesn't have ending forward slash\n        this.resource.uri.base = baseUrl[baseUrl.length - 1] === '/' ? baseUrl.substr(0, baseUrl.length - 1) : baseUrl;\n\n        /**\n         * Makes an API request\n         *\n         * @param {String} resourceUri - Resource URI request to be sent to, e.g. '/v1/products/'\n         * @param {String} method - Request method, e.g. GET, POST, etc.\n         * @param {*} data - Payload to be sent to the server\n         * @param {String|undefined} version - Optional: API version, e.g. 'v1' (if not specifieds using URI)\n         * @returns {jqXHR}\n         */\n        this.call = function (resourceUri, method, data, version) {\n            var that = this,\n                ajaxOptions;\n\n            /**\n             * Helper function to validate request method\n             *\n             * @param {String} methodName\n             * @returns {String}\n             */\n            function validateMethod(methodName) {\n                if (validMethods.indexOf(methodName) === -1) {\n                    throw 'Method name is not valid: ' + methodName;\n                }\n\n                return methodName;\n            }\n\n            /**\n             * Helper function to construct URIs\n             *\n             * @param {String} resUri - Resource URI request to be sent to, e.g. '/v1/products/'\n             * @param {String} m - Request method, e.g. GET, POST, etc.\n             * @param {*} payload - Payload to be sent to the server\n             * @param {String|undefined} v - Optional: API version, e.g. 'v1'\n             * @returns {String}\n             */\n            function getUrl(resUri, m, payload, v) {\n                /**\n                 * @param {String} str\n                 * @return {String}\n                 */\n                function ensureForwardSlash(str) {\n                    return str[0] === '/' ? str : '/' + str;\n                }\n\n                if (v) {\n                    resUri = v + ensureForwardSlash(resUri);\n                }\n\n                if (payload && [that.method.get, that.method['delete']].indexOf(m) !== -1) {\n                    // Append data for GET and DELETE request methods as it's simple ID (usually int)\n                    resUri += payload;\n                }\n\n                return that.resource.uri.base + that.resource.uri.api + ensureForwardSlash(resUri);\n            }\n\n            ajaxOptions = {\n                url: getUrl(resourceUri, method, data, version),\n                type: validateMethod(method),\n                data: data,\n                dataType: 'text',\n                timeout: 5000,\n                processData: false, // Otherwise jQuery will try to append 'data' to query URL\n                cache: false, // Disable browser cache for GET requests\n\n                /**\n                 * @param {Object} request\n                 */\n                beforeSend: function (request) {\n                    request.setRequestHeader('Accept', 'application/json');\n                }\n            };\n\n            $.extend(ajaxOptions, ajaxArgs);\n\n            return $.ajax(ajaxOptions);\n        };\n\n        return this;\n    };\n\n    $.mage.Webapi.prototype.constructor = $.mage.Webapi;\n\n    /**\n     * Syntax sugar over call(). Example usage: $.mage.webapi.Product('v1').get({...})\n     *\n     * @param {String} version - API version (e.g. 'v1')\n     * @returns {{get: Function, create: Function}}\n     */\n    $.mage.Webapi.prototype.Product = function (version) {\n        var that = this; // Points to $.mage.webapi\n\n        if (!(typeof version === 'string' && /v\\d+/i.test(version))) {\n            throw 'Incorrect version format: ' + version;\n        }\n\n        version = version.toLowerCase();\n        that.resource.uri.products = '/products/';\n\n        return {\n            /**\n             * Retrieves information about specific product\n             *\n             * @param {Object} idObj - Object which helps to identify the product, e.g. {id: 1}\n             * @returns {jqXHR}\n             */\n            get: function (idObj) {\n                if (!idObj.hasOwnProperty('id')) {\n                    throw '\"id\" property expected in the object';\n                }\n\n                return that.call(that.resource.uri.products, that.method.get, idObj.id, version);\n            },\n\n            /**\n             * Create a new product\n             *\n             * @param {Object} productData - Example product data:\n             *  productData = {\n             *      \"type_id\": \"simple\",\n             *      \"attribute_set_id\": 4,\n             *      \"sku\": \"1234567890\",\n             *      \"weight\": 1,\n             *      \"status\": 1,\n             *      \"visibility\": 4,\n             *      \"name\": \"Simple Product\",\n             *      \"description\": \"Simple Description\",\n             *      \"short_description\": \"Simple Short Description\",\n             *      \"price\": 99.95,\n             *      \"tax_class_id\": 0\n             *  };\n             * @returns {jqXHR}\n             */\n            create: function (productData) {\n                return that.call(that.resource.uri.products, that.method.create, productData, version);\n            }\n        };\n    };\n});\n"}
}});
