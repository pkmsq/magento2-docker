require.config({"config": {
        "jsbuild":{"mage/zoom.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @deprecated since version 2.2.0\n */\ndefine([\n    'jquery',\n    'mage/template',\n    'jquery-ui-modules/widget'\n], function ($, mageTemplate) {\n    'use strict';\n\n    $.widget('mage.zoom', {\n        options: {\n            largeImage: null,\n            startZoomEvent: 'click',\n            stopZoomEvent: 'mouseleave',\n            hideDelay: '100',\n            effects: {\n                show: {\n                    effect: 'fade',\n                    duration: 100\n                },\n                hide: {\n                    effect: 'fade',\n                    duration: 100\n                }\n            },\n            controls: {\n                lens: {\n                    template: '[data-template=zoom-lens]',\n                    opacity: 0.7,\n                    background: '#ffffff'\n                },\n                track: {\n                    template: '[data-template=zoom-track]'\n                },\n                display: {\n                    template: '[data-template=zoom-display]',\n                    width: 400,\n                    height: 400,\n                    left: 0,\n                    top: 0\n                },\n                notice: {\n                    template: '[data-template=notice]',\n                    text: null,\n                    container: '[data-role=gallery-notice-container]'\n                }\n            },\n            selectors: {\n                image: '[data-role=zoom-image]',\n                imageContainer: '[data-role=gallery-base-image-container]',\n                zoomInner: '[data-role=zoom-inner]',\n                track: '[data-role=zoom-track]',\n                notice: '[data-role=notice]'\n            }\n        },\n        noticeOriginal: '',\n\n        /**\n         * Widget constructor.\n         * @protected\n         */\n        _create: function () {\n            this._setZoomData();\n            this._render();\n            this._bind();\n\n            if (this.largeImage[0].complete) {\n                this._largeImageLoaded();\n            }\n            this._hide(this.display);\n            this._hide(this.track);\n        },\n\n        /**\n         * Render zoom controls.\n         * @protected\n         */\n        _render: function () {\n            var noticeContainer;\n\n            this.element.append(this._renderControl('track').append(this._renderControl('lens')));\n            this.element.append(this._renderControl('display'))\n                .find(this.options.selectors.zoomInner)\n                .append(this._renderLargeImage());\n            noticeContainer = this.element.find(this.options.controls.notice.container);\n            noticeContainer = noticeContainer.length ?\n                noticeContainer :\n                this.element;\n            noticeContainer.append(this._renderControl('notice'));\n        },\n\n        /**\n         * Toggle zoom notice.\n         * @protected\n         */\n        _toggleNotice: function () {\n            this.noticeOriginal = this.notice.text() !== this.options.controls.notice.text ?\n                this.notice.text() :\n                this.noticeOriginal;\n\n            if (this.getZoomRatio() > 1 && this.largeImageSrc && !this.activated) {\n                this.notice.text(this.options.controls.notice.text);\n            } else {\n                this.notice.text(this.noticeOriginal);\n            }\n        },\n\n        /**\n         * Render zoom control.\n         *\n         * @param {String} control - name of the control\n         * @return {Element} DOM-element\n         * @protected\n         */\n        _renderControl: function (control) {\n            var controlData = this.options.controls[control],\n                templateData = {},\n                css = {},\n                controlElement;\n\n            switch (control) {\n                case 'display':\n                    templateData = {\n                        img: this.largeImageSrc\n                    };\n                    css = {\n                        width: controlData.width,\n                        height: controlData.height\n                    };\n                    break;\n\n                case 'notice':\n                    templateData = {\n                        text: controlData.text || ''\n                    };\n                    break;\n            }\n            controlElement = this.element.find(this.options.selectors[control]);\n            controlElement = controlElement.length ?\n                controlElement :\n                $(mageTemplate(controlData.template, {\n                    data: templateData\n                }));\n            this[control] = controlElement.css(css);\n\n            return this[control];\n        },\n\n        /**\n         * Refresh zoom controls.\n         * @protected\n         */\n        _refresh: function () {\n            this._refreshControl('display');\n            this._refreshControl('track');\n            this._refreshControl('lens');\n        },\n\n        /**\n         * Refresh zoom control position and css.\n         *\n         * @param {String} control - name of the control\n         * @protected\n         */\n        _refreshControl: function (control) {\n            var controlData = this.options.controls[control],\n                position,\n                css = {\n                    position: 'absolute'\n                };\n\n            switch (control) {\n                case 'display':\n                    position = {\n                        my: 'left+' + this.options.controls.display.left + ' top+' +\n                            this.options.controls.display.top + '',\n                        at: 'left+' + $(this.image).outerWidth() + ' top',\n                        of: $(this.image)\n                    };\n                    break;\n\n                case 'track':\n                    $.extend(css, {\n                        height: $(this.image).height(),\n                        width: $(this.image).width()\n                    });\n                    position = {\n                        my: 'left top',\n                        at: 'left top',\n                        of: $(this.image)\n                    };\n                    break;\n\n                case 'lens':\n                    $.extend(css, this._calculateLensSize(), {\n                        background: controlData.background,\n                        opacity: controlData.opacity,\n                        left: 0,\n                        top: 0\n                    });\n                    break;\n            }\n            this[control].css(css);\n\n            if (position) {\n                this[control].position(position);\n            }\n        },\n\n        /**\n         * Bind zoom event handlers.\n         * @protected\n         */\n        _bind: function () {\n            /* Events delegated to this.element, which means that all zoom controls can be changed any time\n             *  and not required to re-bind events\n             */\n            var events = {};\n\n            events[this.options.startZoomEvent + ' ' + this.options.selectors.image] = 'show';\n\n            /** Handler */\n            events[this.options.stopZoomEvent + ' ' + this.options.selectors.track] = function () {\n                this._delay(this.hide, this.options.hideDelay || 0);\n            };\n            events['mousemove ' + this.options.selectors.track] = '_move';\n            events.imageupdated = '_onImageUpdated';\n            this._on(events);\n            this._on(this.largeImage, {\n                load: '_largeImageLoaded'\n            });\n        },\n\n        /**\n         * Store initial zoom data.\n         * @protected\n         */\n        _setZoomData: function () {\n            this.image = this.element.find(this.options.selectors.image);\n            this.largeImageSrc = this.options.largeImage ||\n                this.element.find(this.image).data('large');\n        },\n\n        /**\n         * Update zoom when called enable method.\n         * @override\n         */\n        enable: function () {\n            this._super();\n            this._onImageUpdated();\n        },\n\n        /**\n         * Toggle notice when called disable method.\n         * @override\n         */\n        disable: function () {\n            this.notice.text(this.noticeOriginal || '');\n            this._super();\n        },\n\n        /**\n         * Show zoom controls.\n         *\n         * @param {Object} e - event object\n         */\n        show: function (e) {\n            e.preventDefault();\n\n            if (this.getZoomRatio() > 1 && this.largeImageSrc) {\n                e.stopImmediatePropagation();\n                this.activated = true;\n                this._show(this.display, this.options.effects.show);\n                this._show(this.track, this.options.effects.show);\n                this._refresh();\n                this.lens.position({\n                    my: 'center',\n                    at: 'center',\n                    of: e,\n                    using: $.proxy(this._refreshZoom, this)\n                });\n                this._toggleNotice();\n                this._trigger('show');\n            }\n        },\n\n        /** Hide zoom controls */\n        hide: function () {\n            this.activated = false;\n            this._hide(this.display, this.options.effects.hide);\n            this._hide(this.track, this.options.effects.hide);\n            this._toggleNotice();\n            this._trigger('hide');\n        },\n\n        /**\n         * Refresh zoom when image is updated\n         * @protected\n         */\n        _onImageUpdated: function () {\n            // Stop loader in case previous active image has not been loaded yet\n            $(this.options.selectors.image).trigger('processStop');\n\n            if (!this.image.is($(this.options.selectors.image))) {\n                this._setZoomData();\n\n                if (this.largeImageSrc) {\n                    this._refreshLargeImage();\n                    this._refresh();\n                } else {\n                    this.hide();\n                }\n            }\n        },\n\n        /**\n         * Reset this.ratio when large image is loaded\n         * @protected\n         */\n        _largeImageLoaded: function () {\n            this.largeImage.css({\n                width: 'auto',\n                height: 'auto'\n            });\n            this.largeImageSize = {\n                width: this.largeImage.width() || this.largeImage.get(0).naturalWidth,\n                height: this.largeImage.height() || this.largeImage.get(0).naturalHeight\n            };\n            this.ratio = null;\n            this._toggleNotice();\n            $(this.options.selectors.image).trigger('processStop');\n        },\n\n        /**\n         * Refresh large image (refresh \"src\" and initial position)\n         * @protected\n         */\n        _refreshLargeImage: function () {\n            var oldSrc;\n\n            if (this.largeImage) {\n                oldSrc = this.largeImage.attr('src');\n\n                if (oldSrc !== this.largeImageSrc) {\n                    $(this.options.selectors.image).trigger('processStart');\n                    this.largeImage.attr('src', this.largeImageSrc);\n                }\n\n                this.largeImage.css({\n                    top: 0,\n                    left: 0\n                });\n            }\n        },\n\n        /**\n         * @return {Element} DOM-element\n         * @protected\n         */\n        _renderLargeImage: function () {\n            var image = $(this.options.selectors.image);\n\n            // Start loader if 'load' event of image is expected to trigger later\n            if (this.largeImageSrc) {\n                image.trigger('processStart');\n            }\n\n            // No need to create template just for img tag\n            this.largeImage = $('<img />', {\n                src: this.largeImageSrc\n            });\n\n            return this.largeImage;\n        },\n\n        /**\n         * Calculate zoom ratio.\n         *\n         * @return {Number}\n         * @protected\n         */\n        getZoomRatio: function () {\n            var imageWidth;\n\n            if (this.ratio === null || typeof this.ratio === 'undefined') {\n                imageWidth = $(this.image).width() || $(this.image).prop('width');\n\n                return this.largeImageSize ? this.largeImageSize.width / imageWidth : 1;\n            }\n\n            return this.ratio;\n        },\n\n        /**\n         * Calculate lens size, depending on zoom ratio.\n         *\n         * @return {Object} object contain width and height fields\n         * @protected\n         */\n        _calculateLensSize: function () {\n            var displayData = this.options.controls.display,\n                ratio = this.getZoomRatio();\n\n            return {\n                width: Math.ceil(displayData.width / ratio),\n                height: Math.ceil(displayData.height / ratio)\n            };\n        },\n\n        /**\n         * Refresh position of large image depending of position of zoom lens.\n         *\n         * @param {Object} position\n         * @param {Object} ui\n         * @protected\n         */\n        _refreshZoom: function (position, ui) {\n            $(ui.element.element).css(position);\n            this.largeImage.css(this._getLargeImageOffset(position));\n        },\n\n        /**\n         * @param {Object} position\n         * @return {Object}\n         * @private\n         */\n        _getLargeImageOffset: function (position) {\n            var ratio = this.getZoomRatio();\n\n            return {\n                top: -(position.top * ratio),\n                left: -(position.left * ratio)\n            };\n        },\n\n        /**\n         * Mouse move handler.\n         *\n         * @param {Object} e - event object\n         * @protected\n         */\n        _move: function (e) {\n            this.lens.position({\n                my: 'center',\n                at: 'left top',\n                of: e,\n                collision: 'fit',\n                within: this.image,\n                using: $.proxy(this._refreshZoom, this)\n            });\n        }\n    });\n\n    /** Extension for zoom widget - white borders detection */\n    $.widget('mage.zoom', $.mage.zoom, {\n        /**\n         * Get aspect ratio of the element.\n         *\n         * @param {Object} element - jQuery collection\n         * @return {*}\n         * @protected\n         */\n        _getAspectRatio: function (element) {\n            var width, height, aspectRatio;\n\n            if (!element || !element.length) {\n                return null;\n            }\n            width = element.width() || element.prop('width');\n            height = element.height() || element.prop('height');\n            aspectRatio = width / height;\n\n            return Math.round(aspectRatio * 100) / 100;\n        },\n\n        /**\n         * Calculate large image offset depending on enabled \"white borders\" functionality.\n         *\n         * @return {Object}\n         * @protected\n         */\n        _getWhiteBordersOffset: function () {\n            var ratio = this.getZoomRatio(),\n                largeWidth = this.largeImageSize.width / ratio,\n                largeHeight = this.largeImageSize.height / ratio,\n                width = this.image.width() || this.image.prop('width'),\n                height = this.image.height() || this.image.prop('height'),\n                offsetLeft = width - largeWidth > 0 ?\n                Math.ceil((width - largeWidth) / 2) :\n                0,\n                offsetTop = height - largeHeight > 0 ?\n                Math.ceil((height - largeHeight) / 2) :\n                0;\n\n            return {\n                top: offsetTop,\n                left: offsetLeft\n            };\n        },\n\n        /**\n         * @override\n         */\n        _largeImageLoaded: function () {\n            this._super();\n            this.whiteBordersOffset = null;\n\n            if (this._getAspectRatio(this.image) !== this._getAspectRatio(this.largeImage)) {\n                this.whiteBordersOffset = this._getWhiteBordersOffset();\n            }\n        },\n\n        /**\n         * @override\n         */\n        _getLargeImageOffset: function (position) {\n            if (this.whiteBordersOffset) {\n                position.top -= this.whiteBordersOffset.top;\n                position.left -= this.whiteBordersOffset.left;\n            }\n\n            return this._superApply([position]);\n        }\n    });\n\n    return $.mage.zoom;\n});\n"}
}});
