require.config({"config": {
        "jsbuild":{"jquery/ui-modules/widget.js":"/*!\n * jQuery UI Widget - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/jQuery.widget/\n */\n\ndefine([\n    'jquery'\n], function ($, undefined) {\n\n    var uuid = 0,\n        slice = Array.prototype.slice,\n        _cleanData = $.cleanData;\n    $.cleanData = function (elems) {\n        for (var i = 0, elem; (elem = elems[i]) != null; i++) {\n            try {\n                $(elem).triggerHandler(\"remove\");\n                // http://bugs.jquery.com/ticket/8235\n            } catch (e) {\n            }\n        }\n        _cleanData(elems);\n    };\n\n    $.widget = function (name, base, prototype) {\n        var fullName, existingConstructor, constructor, basePrototype,\n            // proxiedPrototype allows the provided prototype to remain unmodified\n            // so that it can be used as a mixin for multiple widgets (#8876)\n            proxiedPrototype = {},\n            namespace = name.split(\".\")[0];\n\n        name = name.split(\".\")[1];\n        fullName = namespace + \"-\" + name;\n\n        if (!prototype) {\n            prototype = base;\n            base = $.Widget;\n        }\n\n        // create selector for plugin\n        $.expr[\":\"][fullName.toLowerCase()] = function (elem) {\n            return !!$.data(elem, fullName);\n        };\n\n        $[namespace] = $[namespace] || {};\n        existingConstructor = $[namespace][name];\n        constructor = $[namespace][name] = function (options, element) {\n            // allow instantiation without \"new\" keyword\n            if (!this._createWidget) {\n                return new constructor(options, element);\n            }\n\n            // allow instantiation without initializing for simple inheritance\n            // must use \"new\" keyword (the code above always passes args)\n            if (arguments.length) {\n                this._createWidget(options, element);\n            }\n        };\n        // extend with the existing constructor to carry over any static properties\n        $.extend(constructor, existingConstructor, {\n            version: prototype.version,\n            // copy the object used to create the prototype in case we need to\n            // redefine the widget later\n            _proto: $.extend({}, prototype),\n            // track widgets that inherit from this widget in case this widget is\n            // redefined after a widget inherits from it\n            _childConstructors: []\n        });\n\n        basePrototype = new base();\n        // we need to make the options hash a property directly on the new instance\n        // otherwise we'll modify the options hash on the prototype that we're\n        // inheriting from\n        basePrototype.options = $.widget.extend({}, basePrototype.options);\n        $.each(prototype, function (prop, value) {\n            if (!$.isFunction(value)) {\n                proxiedPrototype[prop] = value;\n                return;\n            }\n            proxiedPrototype[prop] = (function () {\n                var _super = function () {\n                        return base.prototype[prop].apply(this, arguments);\n                    },\n                    _superApply = function (args) {\n                        return base.prototype[prop].apply(this, args);\n                    };\n                return function () {\n                    var __super = this._super,\n                        __superApply = this._superApply,\n                        returnValue;\n\n                    this._super = _super;\n                    this._superApply = _superApply;\n\n                    returnValue = value.apply(this, arguments);\n\n                    this._super = __super;\n                    this._superApply = __superApply;\n\n                    return returnValue;\n                };\n            })();\n        });\n        constructor.prototype = $.widget.extend(basePrototype, {\n            // TODO: remove support for widgetEventPrefix\n            // always use the name + a colon as the prefix, e.g., draggable:start\n            // don't prefix for widgets that aren't DOM-based\n            widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\n        }, proxiedPrototype, {\n            constructor: constructor,\n            namespace: namespace,\n            widgetName: name,\n            widgetFullName: fullName\n        });\n\n        // If this widget is being redefined then we need to find all widgets that\n        // are inheriting from it and redefine all of them so that they inherit from\n        // the new version of this widget. We're essentially trying to replace one\n        // level in the prototype chain.\n        if (existingConstructor) {\n            $.each(existingConstructor._childConstructors, function (i, child) {\n                var childPrototype = child.prototype;\n\n                // redefine the child widget using the same prototype that was\n                // originally used, but inherit from the new version of the base\n                $.widget(childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto);\n            });\n            // remove the list of existing child constructors from the old constructor\n            // so the old child constructors can be garbage collected\n            delete existingConstructor._childConstructors;\n        } else {\n            base._childConstructors.push(constructor);\n        }\n\n        $.widget.bridge(name, constructor);\n    };\n\n    $.widget.extend = function (target) {\n        var input = slice.call(arguments, 1),\n            inputIndex = 0,\n            inputLength = input.length,\n            key,\n            value;\n        for (; inputIndex < inputLength; inputIndex++) {\n            for (key in input[inputIndex]) {\n                value = input[inputIndex][key];\n                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {\n                    // Clone objects\n                    if ($.isPlainObject(value)) {\n                        target[key] = $.isPlainObject(target[key]) ?\n                            $.widget.extend({}, target[key], value) :\n                            // Don't extend strings, arrays, etc. with objects\n                            $.widget.extend({}, value);\n                        // Copy everything else by reference\n                    } else {\n                        target[key] = value;\n                    }\n                }\n            }\n        }\n        return target;\n    };\n\n    $.widget.bridge = function (name, object) {\n        var fullName = object.prototype.widgetFullName || name;\n        $.fn[name] = function (options) {\n            var isMethodCall = typeof options === \"string\",\n                args = slice.call(arguments, 1),\n                returnValue = this;\n\n            // allow multiple hashes to be passed on init\n            options = !isMethodCall && args.length ?\n                $.widget.extend.apply(null, [options].concat(args)) :\n                options;\n\n            if (isMethodCall) {\n                this.each(function () {\n                    var methodValue,\n                        instance = $.data(this, fullName);\n                    if (!instance) {\n                        return $.error(\"cannot call methods on \" + name + \" prior to initialization; \" +\n                            \"attempted to call method '\" + options + \"'\");\n                    }\n                    if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n                        return $.error(\"no such method '\" + options + \"' for \" + name + \" widget instance\");\n                    }\n                    methodValue = instance[options].apply(instance, args);\n                    if (methodValue !== instance && methodValue !== undefined) {\n                        returnValue = methodValue && methodValue.jquery ?\n                            returnValue.pushStack(methodValue.get()) :\n                            methodValue;\n                        return false;\n                    }\n                });\n            } else {\n                this.each(function () {\n                    var instance = $.data(this, fullName);\n                    if (instance) {\n                        instance.option(options || {})._init();\n                    } else {\n                        $.data(this, fullName, new object(options, this));\n                    }\n                });\n            }\n\n            return returnValue;\n        };\n    };\n\n    $.Widget = function ( /* options, element */) {\n    };\n    $.Widget._childConstructors = [];\n\n    $.Widget.prototype = {\n        widgetName: \"widget\",\n        widgetEventPrefix: \"\",\n        defaultElement: \"<div>\",\n        options: {\n            disabled: false,\n\n            // callbacks\n            create: null\n        },\n        _createWidget: function (options, element) {\n            element = $(element || this.defaultElement || this)[0];\n            this.element = $(element);\n            this.uuid = uuid++;\n            this.eventNamespace = \".\" + this.widgetName + this.uuid;\n            this.options = $.widget.extend({},\n                this.options,\n                this._getCreateOptions(),\n                options);\n\n            this.bindings = $();\n            this.hoverable = $();\n            this.focusable = $();\n\n            if (element !== this) {\n                $.data(element, this.widgetFullName, this);\n                this._on(true, this.element, {\n                    remove: function (event) {\n                        if (event.target === element) {\n                            this.destroy();\n                        }\n                    }\n                });\n                this.document = $(element.style ?\n                    // element within the document\n                    element.ownerDocument :\n                    // element is window or document\n                    element.document || element);\n                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);\n            }\n\n            this._create();\n            this._trigger(\"create\", null, this._getCreateEventData());\n            this._init();\n        },\n        _getCreateOptions: $.noop,\n        _getCreateEventData: $.noop,\n        _create: $.noop,\n        _init: $.noop,\n\n        destroy: function () {\n            this._destroy();\n            // we can probably remove the unbind calls in 2.0\n            // all event bindings should go through this._on()\n            this.element\n                .unbind(this.eventNamespace)\n                // 1.9 BC for #7810\n                // TODO remove dual storage\n                .removeData(this.widgetName)\n                .removeData(this.widgetFullName)\n                // support: jquery <1.6.3\n                // http://bugs.jquery.com/ticket/9413\n                .removeData($.camelCase(this.widgetFullName));\n            this.widget()\n                .unbind(this.eventNamespace)\n                .removeAttr(\"aria-disabled\")\n                .removeClass(\n                    this.widgetFullName + \"-disabled \" +\n                    \"ui-state-disabled\");\n\n            // clean up events and states\n            this.bindings.unbind(this.eventNamespace);\n            this.hoverable.removeClass(\"ui-state-hover\");\n            this.focusable.removeClass(\"ui-state-focus\");\n        },\n        _destroy: $.noop,\n\n        widget: function () {\n            return this.element;\n        },\n\n        option: function (key, value) {\n            var options = key,\n                parts,\n                curOption,\n                i;\n\n            if (arguments.length === 0) {\n                // don't return a reference to the internal hash\n                return $.widget.extend({}, this.options);\n            }\n\n            if (typeof key === \"string\") {\n                // handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n                options = {};\n                parts = key.split(\".\");\n                key = parts.shift();\n                if (parts.length) {\n                    curOption = options[key] = $.widget.extend({}, this.options[key]);\n                    for (i = 0; i < parts.length - 1; i++) {\n                        curOption[parts[i]] = curOption[parts[i]] || {};\n                        curOption = curOption[parts[i]];\n                    }\n                    key = parts.pop();\n                    if (arguments.length === 1) {\n                        return curOption[key] === undefined ? null : curOption[key];\n                    }\n                    curOption[key] = value;\n                } else {\n                    if (arguments.length === 1) {\n                        return this.options[key] === undefined ? null : this.options[key];\n                    }\n                    options[key] = value;\n                }\n            }\n\n            this._setOptions(options);\n\n            return this;\n        },\n        _setOptions: function (options) {\n            var key;\n\n            for (key in options) {\n                this._setOption(key, options[key]);\n            }\n\n            return this;\n        },\n        _setOption: function (key, value) {\n            this.options[key] = value;\n\n            if (key === \"disabled\") {\n                this.widget()\n                    .toggleClass(this.widgetFullName + \"-disabled ui-state-disabled\", !!value)\n                    .attr(\"aria-disabled\", value);\n                this.hoverable.removeClass(\"ui-state-hover\");\n                this.focusable.removeClass(\"ui-state-focus\");\n            }\n\n            return this;\n        },\n\n        enable: function () {\n            return this._setOption(\"disabled\", false);\n        },\n        disable: function () {\n            return this._setOption(\"disabled\", true);\n        },\n\n        _on: function (suppressDisabledCheck, element, handlers) {\n            var delegateElement,\n                instance = this;\n\n            // no suppressDisabledCheck flag, shuffle arguments\n            if (typeof suppressDisabledCheck !== \"boolean\") {\n                handlers = element;\n                element = suppressDisabledCheck;\n                suppressDisabledCheck = false;\n            }\n\n            // no element argument, shuffle and use this.element\n            if (!handlers) {\n                handlers = element;\n                element = this.element;\n                delegateElement = this.widget();\n            } else {\n                // accept selectors, DOM elements\n                element = delegateElement = $(element);\n                this.bindings = this.bindings.add(element);\n            }\n\n            $.each(handlers, function (event, handler) {\n                function handlerProxy() {\n                    // allow widgets to customize the disabled handling\n                    // - disabled as an array instead of boolean\n                    // - disabled class as method for disabling individual parts\n                    if (!suppressDisabledCheck &&\n                        (instance.options.disabled === true ||\n                            $(this).hasClass(\"ui-state-disabled\"))) {\n                        return;\n                    }\n                    return (typeof handler === \"string\" ? instance[handler] : handler)\n                        .apply(instance, arguments);\n                }\n\n                // copy the guid so direct unbinding works\n                if (typeof handler !== \"string\") {\n                    handlerProxy.guid = handler.guid =\n                        handler.guid || handlerProxy.guid || $.guid++;\n                }\n\n                var match = event.match(/^(\\w+)\\s*(.*)$/),\n                    eventName = match[1] + instance.eventNamespace,\n                    selector = match[2];\n                if (selector) {\n                    delegateElement.delegate(selector, eventName, handlerProxy);\n                } else {\n                    element.bind(eventName, handlerProxy);\n                }\n            });\n        },\n\n        _off: function (element, eventName) {\n            eventName = (eventName || \"\").split(\" \").join(this.eventNamespace + \" \") + this.eventNamespace;\n            element.unbind(eventName).undelegate(eventName);\n        },\n\n        _delay: function (handler, delay) {\n            function handlerProxy() {\n                return (typeof handler === \"string\" ? instance[handler] : handler)\n                    .apply(instance, arguments);\n            }\n\n            var instance = this;\n            return setTimeout(handlerProxy, delay || 0);\n        },\n\n        _hoverable: function (element) {\n            this.hoverable = this.hoverable.add(element);\n            this._on(element, {\n                mouseenter: function (event) {\n                    $(event.currentTarget).addClass(\"ui-state-hover\");\n                },\n                mouseleave: function (event) {\n                    $(event.currentTarget).removeClass(\"ui-state-hover\");\n                }\n            });\n        },\n\n        _focusable: function (element) {\n            this.focusable = this.focusable.add(element);\n            this._on(element, {\n                focusin: function (event) {\n                    $(event.currentTarget).addClass(\"ui-state-focus\");\n                },\n                focusout: function (event) {\n                    $(event.currentTarget).removeClass(\"ui-state-focus\");\n                }\n            });\n        },\n\n        _trigger: function (type, event, data) {\n            var prop, orig,\n                callback = this.options[type];\n\n            data = data || {};\n            event = $.Event(event);\n            event.type = (type === this.widgetEventPrefix ?\n                type :\n                this.widgetEventPrefix + type).toLowerCase();\n            // the original event may come from any element\n            // so we need to reset the target on the new event\n            event.target = this.element[0];\n\n            // copy original event properties over to the new event\n            orig = event.originalEvent;\n            if (orig) {\n                for (prop in orig) {\n                    if (!(prop in event)) {\n                        event[prop] = orig[prop];\n                    }\n                }\n            }\n\n            this.element.trigger(event, data);\n            return !($.isFunction(callback) &&\n                callback.apply(this.element[0], [event].concat(data)) === false ||\n                event.isDefaultPrevented());\n        }\n    };\n\n    $.each({show: \"fadeIn\", hide: \"fadeOut\"}, function (method, defaultEffect) {\n        $.Widget.prototype[\"_\" + method] = function (element, options, callback) {\n            if (typeof options === \"string\") {\n                options = {effect: options};\n            }\n            var hasOptions,\n                effectName = !options ?\n                    method :\n                    options === true || typeof options === \"number\" ?\n                        defaultEffect :\n                        options.effect || defaultEffect;\n            options = options || {};\n            if (typeof options === \"number\") {\n                options = {duration: options};\n            }\n            hasOptions = !$.isEmptyObject(options);\n            options.complete = callback;\n            if (options.delay) {\n                element.delay(options.delay);\n            }\n            if (hasOptions && $.effects && $.effects.effect[effectName]) {\n                element[method](options);\n            } else if (effectName !== method && element[effectName]) {\n                element[effectName](options.duration, options.easing, callback);\n            } else {\n                element.queue(function (next) {\n                    $(this)[method]();\n                    if (callback) {\n                        callback.call(element[0]);\n                    }\n                    next();\n                });\n            }\n        };\n    });\n\n});\n"}
}});
